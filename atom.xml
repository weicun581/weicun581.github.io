<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>创意码头</title>
  
  
  <link href="https://weicun581.github.io/atom.xml" rel="self"/>
  
  <link href="https://weicun581.github.io/"/>
  <updated>2025-04-21T02:45:47.084Z</updated>
  <id>https://weicun581.github.io/</id>
  
  <author>
    <name>程序员小哥</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python玩转免费Deepseek-免费送代码</title>
    <link href="https://weicun581.github.io/2025/04/19/Python%E7%8E%A9%E8%BD%AC%E5%85%8D%E8%B4%B9Deepseek-%E5%85%8D%E8%B4%B9%E9%80%81%E4%BB%A3%E7%A0%81/"/>
    <id>https://weicun581.github.io/2025/04/19/Python%E7%8E%A9%E8%BD%AC%E5%85%8D%E8%B4%B9Deepseek-%E5%85%8D%E8%B4%B9%E9%80%81%E4%BB%A3%E7%A0%81/</id>
    <published>2025-04-19T04:04:00.000Z</published>
    <updated>2025-04-21T02:45:47.084Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250421104245.png" alt="|500"></p><span id="more"></span><p>在AI技术迅猛发展的今天，能够熟练调用大模型API成为开发者的一项重要技能。本文将详细介绍如何使用Python调用Deepseek这一新兴的大模型服务，包括官方渠道和第三方平台的解决方案。本文将提供完整的技术指南，从环境搭建到具体实现，特别重要的是还分享了免费使用的途径。</p><h3 id="Deepseek资源汇总"><a href="#Deepseek资源汇总" class="headerlink" title="Deepseek资源汇总"></a>Deepseek资源汇总</h3><h4 id="1、Deepseek官网"><a href="#1、Deepseek官网" class="headerlink" title="1、Deepseek官网"></a>1、Deepseek官网</h4><p><a href="https://www.deepseek.com/">Deepseek官网地址</a> | <a href="https://platform.deepseek.com/usage">Deepseek账户 API 余额</a><br>请在官网的这里创建API：<br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250421102010.jpg" alt="Pasted image 20250421100439.png|800"><br>API keys 请务必保存好，不要透露给其他人！</p><h4 id="2、硅基流动-官网"><a href="#2、硅基流动-官网" class="headerlink" title="2、硅基流动 官网"></a>2、硅基流动 官网</h4><p><a href="https://cloud.siliconflow.cn/models">硅基平台-官网</a> | <a href="https://cloud.siliconflow.cn/expensebill">账户余额</a> | <a href="https://cloud.siliconflow.cn/bills">消费账单</a><br>特点：速度稍慢，有14元免费额度。<br>免费额度可以从这里领取：<br>登录链接：<a href="https://cloud.siliconflow.cn/i/p1U1Ushe">硅基流动用户系统，统一登录 SSO</a><br>邀请码：<code>p1U1Ushe</code><br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250421103620.png"><br>注册完毕后，请到这里进行 API keys 生成：<br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250421102011.jpg" alt="Pasted image 20250421100951.png|425"><br>同样的，API keys 请务必保存好，不要透露给其他人！</p><h3 id="Python调用Deepseek接口API方法"><a href="#Python调用Deepseek接口API方法" class="headerlink" title="Python调用Deepseek接口API方法"></a>Python调用Deepseek接口API方法</h3><h4 id="1、python环境搭建"><a href="#1、python环境搭建" class="headerlink" title="1、python环境搭建"></a>1、python环境搭建</h4><p>如果你按照Deepseek官网、网上其他教程，进行这样的环境安装：<br><code>pip install openai</code><br>那么，你极有可能会遇到这个错误：(无法导入对应库)<br><code>no OpenAI in openai</code></p><p>正确的安装方法是：<br><code>pip install openai==1.14.2</code><br>在Python环境中运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI </span><br></pre></td></tr></table></figure><p>可以正常导入库，不报错，那么恭喜你，安装成功！</p><h4 id="2、官网API调用方法"><a href="#2、官网API调用方法" class="headerlink" title="2、官网API调用方法"></a>2、官网API调用方法</h4><h4 id="2-1、Deepseek-官网API-教程"><a href="#2-1、Deepseek-官网API-教程" class="headerlink" title="2-1、Deepseek 官网API 教程"></a>2-1、Deepseek 官网API 教程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Please install OpenAI SDK first: `pip3 install openai`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=<span class="string">&quot;&lt;DeepSeek API Key&gt;&quot;</span>, base_url=<span class="string">&quot;https://api.deepseek.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a helpful assistant&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;Hello&quot;</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">    stream=<span class="literal">False</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><p>请注意，一定要替换 <code>api_key</code>，直接运行是无效的。<br>更换 <code>api_key</code> 之后，运行上面的程序，你会发现一个错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">raise</span> self._make_status_error_from_response(err.response) <span class="keyword">from</span> <span class="literal">None</span></span><br><span class="line">openai.APIStatusError: Error code: <span class="number">402</span> - &#123;<span class="string">&#x27;error&#x27;</span>: &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Insufficient Balance&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;unknown_error&#x27;</span>, <span class="string">&#x27;param&#x27;</span>: <span class="literal">None</span>, </span><br><span class="line"><span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;invalid_request_error&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>这个错误是因为：你的账户没有钱。<br>请充值后再试，如果你不想花钱，请看下一章节。</p><h4 id="2-2、硅基流动-官网API-教程"><a href="#2-2、硅基流动-官网API-教程" class="headerlink" title="2-2、硅基流动 官网API 教程"></a>2-2、硅基流动 官网API 教程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=<span class="string">&quot;这里请填入你的API keys&quot;</span>, base_url=<span class="string">&quot;https://api.siliconflow.cn/v1&quot;</span>)</span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;deepseek-ai/DeepSeek-V3&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a helpful assistant&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;Hello&quot;</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">    stream=<span class="literal">False</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><p>请注意，一定要替换 <code>api_key</code>，直接运行是无效的。<br>运行上述代码，你就可以得到：<br><code>Hello! How can I assist you today? 😊</code><br>如果，你看到上面的返回字符串，那么恭喜你，你完成了Python接入Deepseek整套流程！👍👍👍</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要是介绍：如何用python接入Deepseek的API,包括官网的API、硅基流动官网的API(免费)。<br><strong>API资源对比</strong>：</p><ol><li><strong>Deepseek 官网API</strong> 特点：响应速度快，但是没有免费额度。 </li><li><strong>硅基流动 官网API</strong> 特点：速度稍慢，有14元免费额度。</li></ol><p><strong>技术要点总结</strong>：</p><ol><li>如何安装python openAI库。</li><li>如何解决无法导入OpenAI库。</li><li>Deepseek官网无法返回正确内容如何处理。</li><li>如何使用openai库，并获取正确的返回数值。</li></ol><p>如果运行有困难，请留言，看到后我会第一时间回复，免费帮助你解决问题。<br>另外，本文所有代码已经免费共享，请关注公众号：<code>干货满满小客栈</code>，回复 <code>代码</code>，免费获取！</p><p>对了，如果大家对AI、新技术、软件评测感兴趣，可以关注我的微信公众号：<code>干货满满小客栈</code><br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20220901100734.png" alt="image-20220328170047757|left" style="zoom: 12.5%;" /><br>或者个人博客：<a href="https://weicun581.github.io/">创意码头</a>  (<a href="https://weicun581.github.io/">https://weicun581.github.io/</a>)</p>]]></content>
    
    
    <summary type="html">这篇文章会介绍目前可以调用的Deepseek API接口，并分享调用方法。文章最后免费送代码。</summary>
    
    
    
    
    <category term="每日文章" scheme="https://weicun581.github.io/tags/%E6%AF%8F%E6%97%A5%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>VS code Pyqt优雅的编译ui文件到py文件</title>
    <link href="https://weicun581.github.io/2025/04/16/%E4%BC%98%E9%9B%85%E7%9A%84%E7%BC%96%E8%AF%91ui%E6%96%87%E4%BB%B6%E5%88%B0py%E6%96%87%E4%BB%B6/"/>
    <id>https://weicun581.github.io/2025/04/16/%E4%BC%98%E9%9B%85%E7%9A%84%E7%BC%96%E8%AF%91ui%E6%96%87%E4%BB%B6%E5%88%B0py%E6%96%87%E4%BB%B6/</id>
    <published>2025-04-16T08:17:00.000Z</published>
    <updated>2025-04-21T02:45:56.477Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="背景与问题阐述"><a href="#背景与问题阐述" class="headerlink" title="背景与问题阐述"></a>背景与问题阐述</h2><p>在日常的Python GUI开发过程中，我们经常会遇到这样的场景：使用Qt Designer等工具设计好界面后生成.ui文件，然后需要手动将其转换为Python可调用的.py文件。这个过程虽然单个耗时不多，但在多次迭代开发中累积起来会显著降低工作效率。</p><p>在实际项目中，每次调整界面后我们都不得不：</p><ol><li>打开命令行</li><li>执行特定的批处理命令</li><li>等待转换完成</li><li>手动确认结果</li></ol><p>这样的重复操作不仅分散开发注意力，而且久而久之会形成一个明显的效率瓶颈。特别是在快速原型开发和UI频繁调整的阶段，这种机械式的操作甚至会打断开发思路。</p><h2 id="优雅的解决方案"><a href="#优雅的解决方案" class="headerlink" title="优雅的解决方案"></a>优雅的解决方案</h2><p>经过探索实践，我们发现Visual Studio Code提供了一个极为简洁的解决方案：</p><ol><li>在VS Code资源管理器中找到需要转换的.ui文件</li><li>右键点击该文件</li><li>选择”Compile”选项（前提是已安装相应扩展）</li></ol><p><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250417173640.jpg" alt="UI文件编译可视化操作|475"></p><p>此方案的优势在于：</p><ul><li>完全图形化操作，无需记忆命令行</li><li>集成在开发环境中，形成流畅的工作流</li><li>避免了上下文切换带来的效率损失</li></ul><h2 id="Python自动化编译的尝试与思考"><a href="#Python自动化编译的尝试与思考" class="headerlink" title="Python自动化编译的尝试与思考"></a>Python自动化编译的尝试与思考</h2><p>虽然实现了便捷的右键编译，但我们仍探索了更自动化的Python实现方案，以下是核心代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, os, time, subprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">execute_pyuic5_command</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自动化执行pyuic5命令转换UI文件为PY文件&quot;&quot;&quot;</span></span><br><span class="line">    current_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">    temp = os.path.basename(current_dir) + <span class="string">&quot;_ui&quot;</span></span><br><span class="line">    ui_folder = os.path.join(current_dir, temp)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> os.path.exists(ui_folder):</span><br><span class="line">        ui_file = os.path.join(ui_folder, <span class="string">&quot;ui_main.ui&quot;</span>)</span><br><span class="line">        py_file = os.path.join(ui_folder, <span class="string">&quot;ui_main.py&quot;</span>)</span><br><span class="line">        command = <span class="string">f&quot;pyuic5 -x <span class="subst">&#123;ui_file&#125;</span> -o <span class="subst">&#123;py_file&#125;</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            subprocess.run(command, check=<span class="literal">True</span>, shell=<span class="literal">True</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;UI文件转换成功！&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;命令执行失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;发生未知错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>技术要点解析</strong>：</p><ol><li>使用<code>os.path</code>相关方法动态构建文件路径</li><li>通过<code>subprocess.run()</code>执行系统命令</li><li>完善的异常处理机制确保稳定性</li></ol><p>在实际应用中，我们发现这种方案虽然单独执行时可以工作，但在集成到主程序时存在模块导入时序问题。因此目前仅作为技术储备保留下来。</p><h2 id="实践建议与未来方向"><a href="#实践建议与未来方向" class="headerlink" title="实践建议与未来方向"></a>实践建议与未来方向</h2><p>根据实际项目经验，我们推荐：</p><ol><li>对于个人开发，采用VS Code右键编译方案即可满足需求</li><li>团队协作环境中，可建立自动化的构建流程</li><li>复杂项目中，考虑结合文件监视工具实现热重载</li></ol><p>未来可探索的优化方向包括：</p><ul><li>开发专用的VS Code扩展增强UI编译功能</li><li>实现修改监控自动编译机制</li><li>构建项目级的UI资源管理工具</li></ul><p>无论采用何种方案，核心目标都是让开发者能专注于业务逻辑的实现，而非被这些机械性的转换操作所困扰。</p><p>对了，如果大家对AI、新技术、软件评测感兴趣，可以关注我的微信公众号：<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20220901100734.png" alt="image-20220328170047757|left" style="zoom: 12.5%;" />或者个人博客：<a href="https://weicun581.github.io/">创意码头</a>  (<a href="https://weicun581.github.io/">https://weicun581.github.io/</a>)</p>]]></content>
    
    
    <summary type="html">对于经常用pyqt开发软件的同学，把ui文件编译成pyc文件，是一个繁琐的步骤，本文通过优雅的方式，把ui文件转换成py文件。</summary>
    
    
    
    
    <category term="每日文章" scheme="https://weicun581.github.io/tags/%E6%AF%8F%E6%97%A5%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>小白玩转YOLO 第二篇 YOLO环境搭建</title>
    <link href="https://weicun581.github.io/2025/04/15/%E5%B0%8F%E7%99%BD%E7%8E%A9%E8%BD%ACYOLO%20%E7%AC%AC%E4%BA%8C%E7%AF%87%20YOLO%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://weicun581.github.io/2025/04/15/%E5%B0%8F%E7%99%BD%E7%8E%A9%E8%BD%ACYOLO%20%E7%AC%AC%E4%BA%8C%E7%AF%87%20YOLO%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2025-04-15T06:13:00.000Z</published>
    <updated>2025-04-15T06:18:18.703Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="章节1：基础环境"><a href="#章节1：基础环境" class="headerlink" title="章节1：基础环境"></a>章节1：基础环境</h3><h4 id="查看cuda版本"><a href="#查看cuda版本" class="headerlink" title="查看cuda版本"></a>查看cuda版本</h4><p>cmd窗口命令：<code>nvidia-smi</code>  联想小新PC cuda版本为：<code>CUDA Version: 11.7</code><br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250415140632.png" alt="|500"></p><h4 id="pytorch安装方法"><a href="#pytorch安装方法" class="headerlink" title="pytorch安装方法"></a>pytorch安装方法</h4><p><strong>step1</strong>：更新cuda驱动为12.4，方法是运行驱动程序：<code>cuda_12.4.0_551.61_windows.exe</code><br>安装的时候有遇到一个无法安装部分组件的文件，看了这篇教程解决了问题：<a href="https://www.bilibili.com/read/cv35625149/?jump_opus=1">解决CUDA安装失败，Nsight Compute</a><br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250415140703.png" alt="|425"><br>之后继续安装，会出现重启的现象，但是还是成功安装了。</p><p><strong>step2</strong>：查看cuda驱动版本：<br>方法1：DOS窗口输入：<code>nvidia-smi</code><br>方法2：windows 搜索 <code>NVIDIA</code>，打开面板，选择 <code>帮助</code>、<code>系统信息</code>、<code>组件</code>：<br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250415140729.png" alt="|450"></p><p><strong>step3</strong>：根据cuda驱动版本下载pytorch版本，参考了- Stack Overflow这篇文章：<a href="https://stackoverflow.com/questions/57238344/i-have-a-gpu-and-cuda-installed-in-windows-10-but-pytorchs-torch-cuda-is-availa">I have a GPU and CUDA installed in Windows 10 but Pytorch’s torch.cuda.is_available() returns false; how can I correct this? </a><br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250415141358.png" alt="|500"></p><p>&#x3D;&#x3D;最终要的一步就是：先卸载之前的pytorch版本&#x3D;&#x3D;： <code>pip3 uninstall torch</code><br>到pytorch官网去下载、安装pytorch（需要自备好梯子）：<a href="https://pytorch.org/get-started/locally/">Start Locally | PyTorch</a><br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250415141417.png" alt="|500"></p><p>下载、安装命令：<code>pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124</code></p><p><strong>step4</strong>：测试pytorch是否可以使用gpu，编写测试脚本，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;start get info:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available(): <span class="comment"># 判断是否支持 CUDA</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ng&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(torch.__version__)  <span class="comment">#注意是双下划线</span></span><br></pre></td></tr></table></figure><p>运行之后得到的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start get info:</span><br><span class="line">ok</span><br><span class="line"><span class="number">2.4</span><span class="number">.0</span>+cu124</span><br><span class="line">[Finished <span class="keyword">in</span> <span class="number">5.2</span>s]</span><br></pre></td></tr></table></figure><h4 id="在conda里面安装pytorch"><a href="#在conda里面安装pytorch" class="headerlink" title="在conda里面安装pytorch"></a>在conda里面安装pytorch</h4><p>打开conda，依次执行如下命令：<br><code>conda env list</code><br><code>conda activate yolo_v10</code><br><code>pip3 uninstall torch</code><br><code>pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124</code></p><h3 id="章节2：Yolo-使用方法"><a href="#章节2：Yolo-使用方法" class="headerlink" title="章节2：Yolo 使用方法"></a>章节2：Yolo 使用方法</h3><h4 id="章节2-1-：单文件物体检测"><a href="#章节2-1-：单文件物体检测" class="headerlink" title="章节2-1 ：单文件物体检测"></a>章节2-1 ：单文件物体检测</h4><ol><li>打开conda shell，输入指令：<br><code>conda env list</code><br><code>conda activate yolo_v10</code><br><code>cd C:\Users\xxxxx\Desktop\yolo\yolov10\yolov10</code><br><code>python app.py</code></li><li>浏览器访问网址：<a href="http://localhost:7860/">http://localhost:7860/</a></li><li>使用方法：<ul><li><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250415140412.png" alt="|500"></li><li><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250415112043.png" alt="|500"></li></ul></li></ol><h4 id="章节2-2-摄像头实时画面识别"><a href="#章节2-2-摄像头实时画面识别" class="headerlink" title="章节2-2 摄像头实时画面识别"></a>章节2-2 摄像头实时画面识别</h4><p>开启方法：</p><ol><li>打开 anaconda cmd shell ：桌面图标 Anaconda</li><li>显示环境list：<code>conda env list</code></li><li>激活环境： <code>conda activate yolo_v10</code></li><li>进入文件夹：<code>cd E:\1-个人研究记录\yolo\yolov10\yolov10</code><br>(<a href="file:///E:/1-%E4%B8%AA%E4%BA%BA%E7%A0%94%E7%A9%B6%E8%AE%B0%E5%BD%95/yolo/yolov10/yolov10">E:\1-个人研究记录\yolo\yolov10\yolov10</a>)</li><li>运行命令： <code>python yolov10-camera.py</code></li></ol><p>参考教程：<br><a href="https://hali.life/?p=611">【YOLOv10图像识别】自动识别图片、视频、摄像头、电脑桌面中的花朵 – 程序员哈利</a><br><a href="https://docs.ultralytics.com/"> ultralytics教程论坛</a></p><p>对了，如果大家对AI、新技术、软件评测感兴趣，可以关注我的微信公众号：<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20220901100734.png" alt="image-20220328170047757|left" style="zoom: 12.5%;" />或者个人博客：<a href="https://weicun581.github.io/">创意码头</a>  (<a href="https://weicun581.github.io/">https://weicun581.github.io/</a>)</p>]]></content>
    
    
    <summary type="html">小白玩转YOLO 第二篇 YOLO环境搭建</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>小白玩转YOLO第一篇：最简单的效果</title>
    <link href="https://weicun581.github.io/2025/04/15/%E5%B0%8F%E7%99%BD%E7%8E%A9%E8%BD%ACYOLO%E7%AC%AC%E4%B8%80%E7%AF%87%EF%BC%9A%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%88%E6%9E%9C/"/>
    <id>https://weicun581.github.io/2025/04/15/%E5%B0%8F%E7%99%BD%E7%8E%A9%E8%BD%ACYOLO%E7%AC%AC%E4%B8%80%E7%AF%87%EF%BC%9A%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%88%E6%9E%9C/</id>
    <published>2025-04-15T06:10:00.000Z</published>
    <updated>2025-04-15T06:18:27.902Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><p>在人工智能的蓬勃发展进程中，目标检测技术作为计算机视觉领域的关键支撑，正深刻改变着众多行业的运作模式。从熙熙攘攘街头的安防监控，到高速驰骋路上的自动驾驶，从井然有序工厂的工业自动化，再到充满奇幻色彩的增强现实，目标检测无处不在，发挥着至关重要的作用。<br>YOLO（You Only Look Once）系列算法，作为目标检测领域的璀璨明星，自诞生以来便以其高效、实时的卓越性能备受瞩目。从 2015 年 YOLOv1 的惊艳亮相，首次实现实时检测，打破传统目标检测算法的桎梏，到后续多个版本的持续迭代优化，不断提升检测精度与速度，YOLO 系列始终引领着目标检测技术的发展潮流。如今，YOLOv10 的横空出世，更是为这一领域注入了全新的活力，开启了万物识别的崭新时代。<br>YOLOv10 由清华大学（THU-MIG）团队精心打造，是 YOLO 系列的集大成者。它在继承前代优秀基因的基础上，实现了诸多技术突破与创新，不仅在保持高检测精度的同时，显著降低了计算成本和推理延迟，更通过独特的设计理念和先进的技术架构，具备了识别汽车、路标、水杯等各类物体的强大能力，为众多应用场景提供了更为强大、高效的解决方案。<br><strong>实际效果</strong>：</p><p><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250415112448.png" alt="|550"><br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250415112043.png" alt="|550"></p><p><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250415112110.png" alt="|550"></p><p><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250415112247.png" alt="|550"></p><h2 id="二、YOLOV10-技术剖析"><a href="#二、YOLOV10-技术剖析" class="headerlink" title="二、YOLOV10 技术剖析"></a>二、YOLOV10 技术剖析</h2><h3 id="2-1-核心技术突破"><a href="#2-1-核心技术突破" class="headerlink" title="2.1 核心技术突破"></a>2.1 核心技术突破</h3><h4 id="2-1-1-NMS-free-训练"><a href="#2-1-1-NMS-free-训练" class="headerlink" title="2.1.1 NMS-free 训练"></a>2.1.1 NMS-free 训练</h4><p>在传统的目标检测算法中，非极大值抑制（NMS）是后处理阶段的关键步骤，用于去除冗余的检测框，保留最具代表性的目标检测结果。然而，NMS 的使用增加了推理过程的复杂性和延迟，阻碍了模型的端到端部署。YOLOv10 创新性地引入了一致的双重分配机制，彻底摒弃了对 NMS 的依赖。在训练过程中，通过精心设计的算法策略，使得模型能够直接学习到最优的目标检测结果，无需在推理时借助 NMS 进行额外处理。这一突破性的改进，不仅极大地简化了推理流程，还显著降低了推理延迟，使得 YOLOv10 能够在实时性要求极高的应用场景中大放异彩。</p><h4 id="2-1-2-整体效率-精度驱动模型设计策略"><a href="#2-1-2-整体效率-精度驱动模型设计策略" class="headerlink" title="2.1.2 整体效率 - 精度驱动模型设计策略"></a>2.1.2 整体效率 - 精度驱动模型设计策略</h4><p>YOLOv10 秉持整体效率 - 精度驱动的模型设计理念，从效率和精度两个维度对模型架构进行了全面而深入的优化。在效率方面，研究团队提出了轻量级分类 head、空间通道（spatial-channel）解耦下采样和排序指导的块设计等创新方法，有效减少了模型中的计算冗余，使模型架构更加高效紧凑。这些优化措施在大幅降低模型参数数量和计算量（FLOPs）的同时，保持了模型的检测性能，为模型在资源受限的设备上快速运行奠定了坚实基础。</p><p>在精度方面，团队深入探索大核卷积，并提出了有效的部分自注意力（partial self-attention，PSA）模块。大核卷积能够捕捉到更大范围的上下文信息，增强模型对复杂场景和目标物体的特征提取能力；而 PSA 模块则通过对输入特征进行自适应的注意力分配，使模型能够更加聚焦于关键信息，进一步挖掘性能提升的潜力。通过这些方法，YOLOv10 在保持较低计算成本的同时，显著提升了检测精度，实现了效率与精度的完美平衡。</p><h3 id="2-2-网络架构优化"><a href="#2-2-网络架构优化" class="headerlink" title="2.2 网络架构优化"></a>2.2 网络架构优化</h3><h4 id="2-2-1-深度学习架构改进"><a href="#2-2-1-深度学习架构改进" class="headerlink" title="2.2.1 深度学习架构改进"></a>2.2.1 深度学习架构改进</h4><p>相较于前代版本，YOLOv10 在网络架构上进行了大刀阔斧的优化。它采用了更深层次的卷积层，构建了更为复杂且强大的特征提取网络。这些深层卷积层能够逐步提取图像中从低级到高级、从简单到复杂的各类特征，使模型对复杂场景的理解和处理能力得到质的飞跃。同时，YOLOv10 引入了一系列高效的特征提取模块，如具有创新性的模块结构，能够在减少计算量的前提下，最大化地提取图像中的有效特征信息。这些模块通过巧妙的设计，实现了特征在不同尺度和通道间的高效融合与传递，进一步提升了模型对目标物体的检测能力。</p><h4 id="2-2-2-高效的损失函数"><a href="#2-2-2-高效的损失函数" class="headerlink" title="2.2.2 高效的损失函数"></a>2.2.2 高效的损失函数</h4><p>YOLOv10 采用了精心设计的改进损失函数，该损失函数针对目标检测任务的特点进行了优化，能够更准确地衡量模型预测结果与真实标签之间的差异。在训练过程中，这种高效的损失函数使得模型能够更快地收敛，减少训练所需的时间和计算资源。同时，它通过对不同类型误差的合理加权和优化，有效提高了模型的检测精度，使模型在面对各种复杂场景和目标物体时，都能输出更为准确可靠的检测结果。</p><h3 id="2-3-多模型规模支持"><a href="#2-3-多模型规模支持" class="headerlink" title="2.3 多模型规模支持"></a>2.3 多模型规模支持</h3><p>为了满足不同应用场景对模型性能和资源需求的多样化要求，YOLOv10 提供了丰富的模型规模选择，从轻量级的 YOLOv10-N 到高精度的 YOLOv10-X，涵盖了多种不同的模型配置。</p><p>YOLOv10-N 作为轻量级版本，模型结构简洁，参数数量较少，计算量小，能够在资源有限的设备上，如移动终端、嵌入式设备等，实现快速的目标检测。虽然其模型规模较小，但通过巧妙的设计和优化，依然能够保持较高的检测准确率，适用于对实时性要求极高且设备资源相对匮乏的场景，如移动安防监控、便携式智能设备的物体识别等。</p><p>而 YOLOv10-X 则侧重于追求极致的检测精度，它拥有更为复杂的网络结构和更多的参数，能够学习到更加丰富和精细的特征信息。在面对对检测精度要求极为苛刻的应用场景，如工业生产中的高精度质量检测、医学影像中的微小病变检测等，YOLOv10-X 能够充分发挥其优势，输出极为准确的检测结果，为相关领域的决策提供强有力的支持。</p><p>中间的 YOLOv10-S、YOLOv10-M、YOLOv10-B、YOLOv10-L 等不同规模的模型，则在实时性和检测精度之间提供了多种平衡选择，用户可以根据具体的应用需求和设备条件，灵活选择最合适的模型规模，实现最佳的应用效果。</p><h2 id="三、YOLOV10-识别汽车"><a href="#三、YOLOV10-识别汽车" class="headerlink" title="三、YOLOV10 识别汽车"></a>三、YOLOV10 识别汽车</h2><h3 id="3-1-在智能交通与自动驾驶中的关键作用"><a href="#3-1-在智能交通与自动驾驶中的关键作用" class="headerlink" title="3.1 在智能交通与自动驾驶中的关键作用"></a>3.1 在智能交通与自动驾驶中的关键作用</h3><p>在当今智能交通和自动驾驶技术飞速发展的时代，汽车的检测与识别扮演着举足轻重的角色。在繁忙的城市交通中，智能交通监控系统依靠精准的汽车检测与识别技术，实时获取道路上车辆的数量、位置、行驶速度等关键信息，从而实现交通流量的优化调控，有效缓解交通拥堵状况。而在自动驾驶领域，汽车的准确识别更是自动驾驶系统安全、稳定运行的基石。自动驾驶车辆需要在瞬间对周围环境中的各类汽车进行精准检测和识别，判断其行驶状态、行驶方向以及与自身车辆的距离等信息，以便做出合理、安全的驾驶决策，如加速、减速、变道等。</p><h3 id="3-2-针对汽车识别的优化策略"><a href="#3-2-针对汽车识别的优化策略" class="headerlink" title="3.2 针对汽车识别的优化策略"></a>3.2 针对汽车识别的优化策略</h3><h4 id="3-2-1-数据集增强"><a href="#3-2-1-数据集增强" class="headerlink" title="3.2.1 数据集增强"></a>3.2.1 数据集增强</h4><p>为了使 YOLOv10 能够更好地识别汽车，在训练过程中，研究人员对汽车相关的训练数据集进行了精心扩充和增强。除了收集大量不同场景、不同光照条件、不同角度下的汽车图像外，还通过数据增强技术，如随机旋转、缩放、裁剪、添加噪声等方式，人为地生成更多样化的汽车图像样本。这些丰富多样的数据集能够让 YOLOv10 学习到汽车在各种复杂情况下的特征，提高模型对不同场景下汽车的识别能力，增强模型的泛化性能，使其在实际应用中面对千变万化的真实场景时，依然能够准确无误地检测出汽车。</p><h4 id="3-2-2-特征提取优化"><a href="#3-2-2-特征提取优化" class="headerlink" title="3.2.2 特征提取优化"></a>3.2.2 特征提取优化</h4><p>针对汽车的独特外形特征，YOLOv10 在特征提取方面进行了针对性优化。通过调整卷积层的参数和结构，使其能够更好地捕捉汽车的轮廓、车身线条、车灯形状、车轮特征等关键信息。例如，利用特定大小和步长的卷积核，专门对汽车的边缘和角点等特征进行强化提取；通过设计多层级的特征融合模块，将不同尺度下提取到的汽车特征进行有效整合，使模型能够综合考虑汽车的整体和局部特征，从而更准确地识别汽车。此外，结合注意力机制，让模型在处理图像时能够自动聚焦于汽车区域，忽略其他无关背景信息的干扰，进一步提高汽车识别的准确率。</p><h3 id="3-3-实际应用案例与效果展示"><a href="#3-3-实际应用案例与效果展示" class="headerlink" title="3.3 实际应用案例与效果展示"></a>3.3 实际应用案例与效果展示</h3><p>在实际应用中，YOLOv10 在汽车识别方面展现出了卓越的性能。例如，在某城市的智能交通试点项目中，部署了基于 YOLOv10 的交通监控系统。该系统能够实时、准确地检测道路上行驶的各种汽车，无论是在白天阳光强烈的直射下，还是在夜晚灯光昏暗的环境中，亦或是在雨天、雾天等恶劣天气条件下，都能稳定地工作。通过对大量实际交通数据的统计分析，该系统对汽车的检测准确率高达 98% 以上，能够快速、准确地识别出不同品牌、不同型号的汽车，并实时监测其行驶轨迹和速度。这一高效的汽车识别系统为城市交通管理部门提供了详实、准确的数据支持，帮助其及时发现交通拥堵点、事故隐患等问题，并采取相应的措施进行疏导和处理，极大地提升了城市交通的运行效率和安全性。</p><p>在自动驾驶领域的实验测试中，搭载 YOLOv10 汽车识别模块的自动驾驶车辆在模拟和实际道路测试中均表现出色。在复杂的城市道路场景中，车辆能够快速识别出前方、后方以及周围侧方的各类汽车，对其行驶状态的判断准确率达到 97% 以上。当遇到前方车辆突然减速、变道等情况时，自动驾驶车辆能够根据 YOLOv10 提供的准确信息，及时做出安全、合理的驾驶决策，有效避免了碰撞事故的发生，充分展示了 YOLOv10 在自动驾驶汽车识别应用中的巨大潜力和可靠性。</p><h2 id="四、YOLOV10-识别路标"><a href="#四、YOLOV10-识别路标" class="headerlink" title="四、YOLOV10 识别路标"></a>四、YOLOV10 识别路标</h2><h3 id="4-1-对交通安全与智能驾驶的重要意义"><a href="#4-1-对交通安全与智能驾驶的重要意义" class="headerlink" title="4.1 对交通安全与智能驾驶的重要意义"></a>4.1 对交通安全与智能驾驶的重要意义</h3><p>交通标志作为道路交通管理的重要组成部分，是保障道路交通安全、顺畅的关键要素之一。它们如同无声的交通警察，向驾驶员传递着各种必要的信息，如道路规则、行驶方向、速度限制、危险警示等。在智能驾驶时代，准确、实时地识别交通标志对于自动驾驶系统的安全运行至关重要。自动驾驶车辆必须能够迅速解读路标的含义，根据路标指示做出正确的行驶决策，以确保自身及周围交通参与者的安全。同时，在智能交通系统中，对交通标志的有效识别也有助于实现交通流量的优化控制、交通违法行为的监测与预警等功能，对于提升整个交通系统的智能化水平和运行效率具有不可替代的作用。</p><h3 id="4-2-识别路标的技术要点"><a href="#4-2-识别路标的技术要点" class="headerlink" title="4.2 识别路标的技术要点"></a>4.2 识别路标的技术要点</h3><h4 id="4-2-1-多尺度特征融合"><a href="#4-2-1-多尺度特征融合" class="headerlink" title="4.2.1 多尺度特征融合"></a>4.2.1 多尺度特征融合</h4><p>交通标志在实际场景中可能会以不同的大小出现在图像中，为了准确识别各种尺度的交通标志，YOLOv10 采用了多尺度特征融合技术。通过构建具有不同感受野的卷积层和特征金字塔结构，模型能够同时提取图像在不同尺度下的特征信息。在较低层级的卷积层中，模型主要捕捉交通标志的细节特征，如标志上的文字、图案的细微之处；而在较高层级的卷积层和特征金字塔的高层部分，则侧重于提取交通标志的整体形状、轮廓等宏观特征。然后，通过精心设计的特征融合模块，将不同尺度下提取到的特征进行有机融合，使模型能够综合利用各个尺度的信息来判断交通标志的类别和位置。这样，无论交通标志在图像中是大是小，YOLOv10 都能够准确地检测和识别出来。</p><h4 id="4-2-2-对复杂背景的鲁棒性处理"><a href="#4-2-2-对复杂背景的鲁棒性处理" class="headerlink" title="4.2.2 对复杂背景的鲁棒性处理"></a>4.2.2 对复杂背景的鲁棒性处理</h4><p>在实际道路环境中，交通标志往往会受到各种复杂背景因素的干扰，如周围的建筑物、树木、其他车辆、行人以及光照变化、天气条件等。为了提高对复杂背景下路标的识别能力，YOLOv10 在模型训练和优化过程中采取了一系列措施。一方面，在训练数据集中引入了大量包含各种复杂背景的交通标志图像样本，让模型充分学习在不同背景下交通标志的特征模式，增强模型对背景干扰的鲁棒性。另一方面，通过改进模型的特征提取和分类机制，使模型能够自动过滤掉与交通标志无关的背景信息，聚焦于标志本身的关键特征。例如，利用注意力机制引导模型关注图像中可能存在交通标志的区域，抑制背景噪声的影响；通过设计专门的背景抑制模块，对背景特征进行分析和去除，突出交通标志的特征号，从而提高在复杂背景下交通标志识别的准确率和稳定性。</p><h3 id="4-应用场景与实践成果"><a href="#4-应用场景与实践成果" class="headerlink" title="4.应用场景与实践成果"></a>4.应用场景与实践成果</h3><p>在智能交通监控系统中，YOLOv10 的交通标志识别功能得到了广泛应用。例如，在高速公路的入口、出口以及关键路段设置的智能监控摄像头，通过搭载 YOLOv10 算法，能够实时监测道路上的交通标志状态。一旦发现交通标志被遮挡、损坏或设置错误等异常情况，系统能够及时发出警报，通知相关维护人员进行处理，确保交通标志始终能够正常发挥其指示作用。同时，在城市道路的交叉路口、学校、医院等重点区域，基于 YOLOv10 的交通标志识别系统可以实时识别交通标志信息，并将其传输给交通信号控制系统，帮助系统根据实际交通状况合理调整信号灯的配时方案，优化交通流量，提高路口的通行效率。</p><p>在自动驾驶领域的实际应用测试中，搭载 YOLOv10 交通标志识别模块的自动驾驶车辆在各种复杂路况下都表现出了良好的性能。无论是在繁华的城市街道，面对周围复杂的环境和密集的交通标志，还是在偏远的乡村道路，应对可能出现的不规范或被遮挡的交通标志，车辆都能够准确识别出标志的类型和含义，并根据标志指示做出正确的驾驶决策。据统计，在大量的实际道路测试中，YOLOv10 对交通标志的识别准确率达到了 95% 以上，为自动驾驶技术的安全应用提供了可靠的保障，有力地推动了自动驾驶技术向更广泛、更实用的方向发展。</p><h2 id="五、YOLOV10-识别水杯"><a href="#五、YOLOV10-识别水杯" class="headerlink" title="五、YOLOV10 识别水杯"></a>五、YOLOV10 识别水杯</h2><h3 id="5-1-在特定场景中的应用需求"><a href="#5-1-在特定场景中的应用需求" class="headerlink" title="5.1 在特定场景中的应用需求"></a>5.1 在特定场景中的应用需求</h3><p>在一些特定场景中，水杯的识别具有重要的实际应用价值。例如，在智能仓储管理系统中，对于存放水杯等日用品的仓库，需要快速、准确地识别和统计水杯的数量、种类及位置信息，以便实现高效的库存管理和货物分拣。在智能家居环境中，通过智能摄像头对室内物品的识别，当检测到水杯时，可以联动相关设备实现一些智能化操作，如根据用户习惯自动准备热水、提醒用户及时补充水分等，提升家居生活的便利性和智能化程度。在一些餐饮服务场所，利用水杯识别技术可以实现自动计费、餐具配备提醒等功能，提高服务效率和质量。</p><h3 id="5-2-针对水杯识别的模型调整"><a href="#5-2-针对水杯识别的模型调整" class="headerlink" title="5.2 针对水杯识别的模型调整"></a>5.2 针对水杯识别的模型调整</h3><h4 id="5-2-3-小目标检测优化"><a href="#5-2-3-小目标检测优化" class="headerlink" title="5.2.3 小目标检测优化"></a>5.2.3 小目标检测优化</h4><p>水杯在图像中通常属于相对较小的目标物体，为了提高对水杯这类小目标的检测精度，YOLOv10 在小目标检测方面进行了针对性优化。首先，通过调整网络结构，增加了对小目标特征敏感的浅层卷积层的数量和复杂度，使其能够更好地捕捉水杯的细微特征。同时，在特征融合过程中，加强了不同尺度特征之间的信息交互，特别是将浅层的小目标特征与深层的语义特征进行更有效的融合，使模型在利用高层语义信息判断目标类别的同时，不会丢失小目标的细节信息。此外，还采用了一些专门针对小目标检测的算法技巧，如自适应锚框生成策略，根据水杯等小目标的尺寸分布特点，动态生成更适合小目标检测的锚框，提高模型对小目标的检测召回率和准确率。</p><h4 id="5-2-4-材质与外观特征学习"><a href="#5-2-4-材质与外观特征学习" class="headerlink" title="5.2.4 材质与外观特征学习"></a>5.2.4 材质与外观特征学习</h4><p>水杯的材质和外观多种多样，包括塑料、玻璃、金属等不同材质，以及各种形状、颜色和图案的设计，这给识别带来了一定的挑战。为了让 YOLOv10 能够准确识别各种类型的水杯，在训练过程中，特别注重对水杯材质和外观特征的学习。通过收集大量不同材质、外观的水杯图像数据，并对其进行详细标注，使模型能够学习到不同材质水杯在颜色、纹理、光泽等方面的特征差异，以及不同外观设计下水杯的形状、轮廓等特征模式。同时，利用一些先进的特征提取技术，如对不同材质的特征进行专门的通道分离和处理，突出材质相关的特征信息；通过对形状特征的细化提取和描述，提高模型对不同形状水杯的识别能力。这样，无论水杯的材质和外观如何变化，YOLOv10 都能够根据学习到的特征准确地识别出来。</p><h3 id="5-3-实际效果与案例分析"><a href="#5-3-实际效果与案例分析" class="headerlink" title="5.3 实际效果与案例分析"></a>5.3 实际效果与案例分析</h3><p>在某智能仓储项目中，部署了基于 YOLOv10 的水杯识别系统。该系统在仓库环境中对各类水杯进行实时检测和识别，能够快速准确地统计出不同批次、不同型号水杯的库存数量，并实时更新库存信息。通过实际运行数据统计，该系统对水杯的识别准确率达到了 93% 以上，大大提高了仓储管理的效率和准确性，减少了人工盘点的工作量和出错率。在货物分拣环节，系统能够快速识别出货品中的水杯，并引导分拣机器人准确地将其分拣到相应的位置，有效提升了货物分拣的速度和准确性。<br>在一个智能家居应用案例中，用户家中安装了配备 YOLOv10 水杯识别功能的智能摄像头。当用户拿起水杯时，摄像头能够迅速识别出水杯，并通过智能家居控制系统联动智能水壶，根据用户预设的习惯自动为用户准备合适温度的热水。同时，系统还能根据用户使用水杯的频率，适时地提醒用户补充水分。据用户反馈，这一智能化的<br>智能家居体验大幅提升，用户对该功能好评如潮，进一步凸显了YOLOv10在水杯识别应用中的实用价值和广阔前景。</p><p>对了，如果大家对AI、新技术、软件评测感兴趣，可以关注我的微信公众号：<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20220901100734.png" alt="image-20220328170047757|left" style="zoom: 12.5%;" />或者个人博客：<a href="https://weicun581.github.io/">创意码头</a>  (<a href="https://weicun581.github.io/">https://weicun581.github.io/</a>)</p>]]></content>
    
    
    <summary type="html">小白玩转YOLO第一篇：最简单的效果</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Python爬虫下载听风的蚕电子战全集视频</title>
    <link href="https://weicun581.github.io/2025/04/14/30%20Python%E7%88%AC%E8%99%AB%E4%B8%8B%E8%BD%BD%E5%90%AC%E9%A3%8E%E7%9A%84%E8%9A%95%E7%94%B5%E5%AD%90%E6%88%98%E5%85%A8%E9%9B%86%E8%A7%86%E9%A2%91/"/>
    <id>https://weicun581.github.io/2025/04/14/30%20Python%E7%88%AC%E8%99%AB%E4%B8%8B%E8%BD%BD%E5%90%AC%E9%A3%8E%E7%9A%84%E8%9A%95%E7%94%B5%E5%AD%90%E6%88%98%E5%85%A8%E9%9B%86%E8%A7%86%E9%A2%91/</id>
    <published>2025-04-14T09:25:00.000Z</published>
    <updated>2025-04-14T09:29:43.552Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 需求</span><br><span class="line">本人是老蚕的粉丝，特别喜欢他的电子《电子战》，奈何最近他的《电子战》系列全部下架了，为了能够收藏这部视频，所以想借助各种工具及python爬虫代码，将该系列视频全部下载下来。</span><br><span class="line">主要技术路线，如下：（如果你知识想拿视频，请看最后，视频会免费分享出来）</span><br><span class="line">1. 哔哩哔哩上有网友转载的《电子战》系列，获取每一集对应的链接。</span><br><span class="line">2. 第一步的链接，无法直接下载，将其放到小程序上转换成可以下载的链接。</span><br><span class="line">3. 将35集的下载链接、文件名，放到python爬虫中，逐个下载成mp4文件。</span><br><span class="line">4. 将mp4文件通过python程序转成mp3文件。</span><br><span class="line"></span><br><span class="line">下面开始逐步详细介绍做法！</span><br><span class="line"></span><br><span class="line">#### step1 ： 获取b站分享地址</span><br><span class="line">《电子战》b站地址：[听风的蚕说评书——电子战01【一切从南海撞机开始】\_哔哩哔哩\_bilibili](https://www.bilibili.com/video/BV1cdQ9YdE5M/?spm_id_from=333.1387.homepage.video_card.click&amp;vd_source=7fcee9c8f7f97cef2c1f6f2f8c891159)</span><br><span class="line">逐个每一集点击分享，就可以获得每一集的链接。</span><br><span class="line">![image.png|400](https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250414171731.png)</span><br><span class="line"></span><br><span class="line">```text</span><br><span class="line">【听风的蚕说评书——电子战01【一切从南海撞机开始】】 https://www.bilibili.com/video/BV1cdQ9YdE5M/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战02【哑巴吃黄连】】 https://www.bilibili.com/video/BV1ixQ9YjEb1/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战03【铭记先驱】】 https://www.bilibili.com/video/BV1LtQdYXE2T/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战04【日本雷达屏幕飘雪花】】 https://www.bilibili.com/video/BV1j4QdYWERg/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战05【兔子千里眼】】 https://www.bilibili.com/video/BV1KSQdYBEGW/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战06【美帝不敢应战】】 https://www.bilibili.com/video/BV1tPQdYuEyP/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战07【鹰酱C4系统如何】】 https://www.bilibili.com/video/BV1d2QRYDEUe/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战08【南昌舰单刀赴会】】 https://www.bilibili.com/video/BV1BkQRYWEnN/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战09【南海潜艇撞击】】 https://www.bilibili.com/video/BV1adQRYyEJ6/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战10【巴铁邻居互掐】】 https://www.bilibili.com/video/BV18fQRYkEvc/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战11【美国人懂面子吗？】】 https://www.bilibili.com/video/BV1UnQRYBEbw/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战11【美国人懂面子吗？】】 https://www.bilibili.com/video/BV1UnQRYBEbw/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战13【大毛打二毛】】 https://www.bilibili.com/video/BV1UbQfYUEMj/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战14【打起来了？】】 https://www.bilibili.com/video/BV1mhQfY7Eso/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战15【斗争纪实】】 https://www.bilibili.com/video/BV1rYXPYHE4v/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战16【接着唱接着舞】】 https://www.bilibili.com/video/BV1neXPYDEQf/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战17【战斗指数】】 https://www.bilibili.com/video/BV1p8XPYWEqu/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战18【高手过招点到为止】】 https://www.bilibili.com/video/BV1zdXAY2EB7/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战19【心潮澎湃】】 https://www.bilibili.com/video/BV1BfXAYyEMi/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战20【美帝核心本质】】 https://www.bilibili.com/video/BV1agXPYTE6w/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战21【地球往事】】 https://www.bilibili.com/video/BV1xtXKYYEk8/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战22【水门事件】】 https://www.bilibili.com/video/BV1FfXNYWEvJ/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战23【教员重塑秩序】】 https://www.bilibili.com/video/BV16oXNY9EDA/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战24【石油美元越战】】 https://www.bilibili.com/video/BV1kXXNY4EZV/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战25【阿富汗连环计】】 https://www.bilibili.com/video/BV1rdXNYsE8Y/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战25【阿富汗连环计】】 https://www.bilibili.com/video/BV1rdXNYsE8Y/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战27【中美对抗历史】】 https://www.bilibili.com/video/BV1tYXHYLENZ/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战28 【大战序幕】】 https://www.bilibili.com/video/BV1utXHYUEmS/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战29【英雄无畏】】 https://www.bilibili.com/video/BV1c2XHYiELX/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战30【残骸里的线索】】 https://www.bilibili.com/video/BV1P6XHYrE95/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战31【2022年的连环计】】 https://www.bilibili.com/video/BV11HXsYJE1d/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战32【安倍晋三之死】】 https://www.bilibili.com/video/BV1neZvYSEFy/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战32A【伊朗和巴铁】】 https://www.bilibili.com/video/BV1vrZHYqETK/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战32A【伊朗和巴铁】】 https://www.bilibili.com/video/BV1vrZHYqETK/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line">【听风的蚕说评书——电子战34【致命任务之区域拒止】】 https://www.bilibili.com/video/BV1LJdkYxEme/?share_source=copy_web&amp;vd_source=43b0b245485ae3aab815b812bcca34ff</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="step2：-获取下载地址"><a href="#step2：-获取下载地址" class="headerlink" title="step2： 获取下载地址"></a>step2： 获取下载地址</h4><p>第一步的链接，是无法直接下载的（貌似下载也是很短的一部分）<br>需要透过微信小程序去解析出下载链接：<br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250414171747.png" alt="image.png|375"></p><p>按照1、2、3去点击，就可以获得下载链接了。<br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250414171803.png" alt="image.png|500"></p><h4 id="step3：python爬虫批量下载"><a href="#step3：python爬虫批量下载" class="headerlink" title="step3：python爬虫批量下载"></a>step3：python爬虫批量下载</h4><p>python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_video</span>(<span class="params">url, file_name</span>):</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 发送 GET 请求到 URL</span></span><br><span class="line">        response = requests.get(url, headers=headers, stream=<span class="literal">True</span>)</span><br><span class="line">        response.raise_for_status()  <span class="comment"># 检查请求是否成功</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打开文件写入内容</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> response.iter_content(chunk_size=<span class="number">8192</span>):</span><br><span class="line">                file.write(chunk)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;视频下载成功并保存为 <span class="subst">&#123;file_name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>with open(file_name, &#39;wb&#39;) as file</code>：使用 <code>with</code> 语句以二进制写入模式（<code>&#39;wb&#39;</code>）打开一个文件，这样可以确保文件在使用完毕后会被自动关闭。</li><li><code>response.iter_content(chunk_size = 8192)</code>：这是一个迭代器，它会将响应内容按每块 8192 字节（即 8KB）的大小进行分割，逐块返回。</li><li><code>file.write(chunk)</code>：将每一块内容写入到打开的文件中。</li></ul><h4 id="step4：mp4批量转mp3"><a href="#step4：mp4批量转mp3" class="headerlink" title="step4：mp4批量转mp3"></a>step4：mp4批量转mp3</h4><p>python代码： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> moviepy <span class="keyword">import</span> VideoFileClip</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_audio_from_mp4</span>(<span class="params">mp4_file_path, mp3_file_path</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        video = VideoFileClip(mp4_file_path)</span><br><span class="line">        audio = video.audio</span><br><span class="line">        audio.write_audiofile(mp3_file_path)</span><br><span class="line">        audio.close()</span><br><span class="line">        video.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;音频已成功提取并保存为 <span class="subst">&#123;mp3_file_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;提取音频时出现错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    mp4_file = <span class="string">r&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">C:\Users\  \Desktop\爬虫-电子战视频下载\mp4_全集\33_伊朗和巴铁.mp4</span></span><br><span class="line"><span class="string">C:\Users\  \Desktop\爬虫-电子战视频下载\mp4_全集\34_伊朗和巴铁.mp4</span></span><br><span class="line"><span class="string">C:\Users\  \Desktop\爬虫-电子战视频下载\mp4_全集\35_致命任务之区域拒止.mp4</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    my_list = mp4_file.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    new_list = [item <span class="keyword">for</span> item <span class="keyword">in</span> my_list <span class="keyword">if</span> item.strip()]</span><br><span class="line">    totalCnt = <span class="built_in">len</span>(new_list)</span><br><span class="line">    idx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> mp4_file.split(<span class="string">&#x27;\n&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(item.strip()) != <span class="number">0</span>:</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">            mp4_file = item</span><br><span class="line">            mp3_file = mp4_file.split(<span class="string">&#x27;.mp4&#x27;</span>)[<span class="number">0</span>]+<span class="string">&quot;.mp3&quot;</span></span><br><span class="line">            extract_audio_from_mp4(mp4_file, mp3_file)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;[%02d / %02d]&#x27;</span>%(idx,totalCnt))</span><br></pre></td></tr></table></figure><p>moviepy 部分的核心代码是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">video = VideoFileClip(mp4_file_path)</span><br><span class="line">audio = video.audio</span><br><span class="line">audio.write_audiofile(mp3_file_path)</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此，已经把《电子战》系列视频全部下载成mp4、mp3文件了：<br>有需要的，请直接微信公众号回复：电子战，免费领取！纯纯免费！<br>对了，如果大家对AI、新技术、软件评测感兴趣，可以关注我的微信公众号：<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20220901100734.png" alt="image-20220328170047757|left" style="zoom: 12.5%;" />或者个人博客：<a href="https://weicun.gitee.io/">https://weicun.gitee.io/</a>  <a href="https://weicun.gitee.io/">蓝色单车</a><br>如果你也喜欢编程、免费文件共享，请加群！<br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20250414171821.png" alt="image.png|350"></p>]]></content>
    
    
    <summary type="html">通过Python 爬虫下载 听风的蚕 电子战全集。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>写在chatGPT免费额度用完之后</title>
    <link href="https://weicun581.github.io/2023/06/01/27%20%E5%86%99%E5%9C%A8chatGPT%E5%85%8D%E8%B4%B9%E9%A2%9D%E5%BA%A6%E7%94%A8%E5%AE%8C%E4%B9%8B%E5%90%8E/"/>
    <id>https://weicun581.github.io/2023/06/01/27%20%E5%86%99%E5%9C%A8chatGPT%E5%85%8D%E8%B4%B9%E9%A2%9D%E5%BA%A6%E7%94%A8%E5%AE%8C%E4%B9%8B%E5%90%8E/</id>
    <published>2023-06-01T03:10:00.000Z</published>
    <updated>2023-06-06T06:14:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>​今天在用python调用chatGPT API的时候出现了这个错误，<code>openai.error.RateLimitError: You exceeded your current quota, please check your plan and billing details.</code> 唉，这可咋整？</p></blockquote><span id="more"></span><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>第一时间想到去官网查看下余额，因为之前听说过key泄漏，余额哗哗流掉的情况。所我第一时间以为是key泄漏了。<br>到<a href="https://platform.openai.com/account/usage">官网上查了下余额</a>得到的结果如下：</p><div style="display:inline-block;"><img width="80%" style="float:left; margin-right: 10px;" src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230601111434.png" alt="20230601111434"></div>好消息是：余额还有很多没用完，key没有泄漏。坏消息是：余额过期了。此时，我真想对openAI唱一句：听我说谢谢你，温暖了四季。。。<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>查了下<a href="https://opencat.app/docs/zh-CN/faq">openAI官网说明</a>：</p><div style="display:inline-block;"><img width="80%" style="float:left; margin-right: 10px;" src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230601112013.png" alt="20230601112013"></div>看来必须要绑定信用卡才能继续使用chatGPT API.<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="1-绑定信用卡"><a href="#1-绑定信用卡" class="headerlink" title="1- 绑定信用卡"></a>1- 绑定信用卡</h4><p><font color="#ff0000">过于繁琐、不安全，暂时不搞了。</font></p><h4 id="2-使用chatGPT官网"><a href="#2-使用chatGPT官网" class="headerlink" title="2- 使用chatGPT官网"></a>2- 使用chatGPT官网</h4><p><a href="https://chat.openai.com/">chatGPT官网</a>还是可以继续使用的。<br>相较于种类繁多的各种chatGPT 二次开发，官网最大的劣势就在于没有<code>提示词</code>，有没有edge浏览器提示词插件呢？<br>答案是：有</p><h5 id="⚡️ChatGPT-Shortcut"><a href="#⚡️ChatGPT-Shortcut" class="headerlink" title="⚡️ChatGPT Shortcut"></a>⚡️ChatGPT Shortcut</h5><p><strong>资源</strong>： <a href="https://github.com/rockbenben/ChatGPT-Shortcut">github地址</a>  <a href="https://microsoftedge.microsoft.com/addons/detail/chatgpt-shortcut/hnggpalhfjmdhhmgfjpmhlfilnbmjoin">edge插件地址</a><br>（<em>顺便说一句，<a href="https://newzone.top/blog.html">作者的博客</a>真是宝藏博客，是我喜欢的style，再看看<a href="https://weicun.gitee.io/">我的博客</a>，唉，努力想强者学习。</em>）<br><strong>使用感受</strong>：的确不错，虽然不能直接调出命令，需要复制粘贴到chatGPT，但是很干净、清爽。<br><strong>优点</strong>：干净清爽、支持中文、免费<br><strong>缺点</strong>：不支持一键嵌入，需要自己复制粘贴</p><h5 id="AIPRM-for-ChatGPT"><a href="#AIPRM-for-ChatGPT" class="headerlink" title="AIPRM for ChatGPT"></a>AIPRM for ChatGPT</h5><p><strong>资源</strong>： <a href="https://chrome.google.com/webstore/detail/aiprm-for-chatgpt/ojnbohmppadfgpejeebfnmnknjdlckgj">edge插件地址</a><br><strong>使用感受</strong>：纯英文，没有实际使用意义<br><strong>优点</strong>：可以一键嵌入命令<br><strong>缺点</strong>：界面繁琐、收费、不支持中文。</p><p><strong>最终结论</strong>：使用⚡️<strong>ChatGPT Shortcut</strong></p><p><strong>顺便说一句:</strong> <font color="#ff0000">Goodbye 各类好用的chatGPT二次开发应用，由于API过期，我将回归chatGPT官网。</font><br>hi~<br>hi~<br>hi123321阿道夫<br>尺寸</p><hr><h3 id="🌈参考："><a href="#🌈参考：" class="headerlink" title="🌈参考："></a>🌈参考：</h3><ol><li><a href="https://zhuanlan.zhihu.com/p/620257174">还在为chatgpt的prompt发愁？试试这些插件，让提问变得更有效、更简单~ - 知乎</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;​	今天在用python调用chatGPT API的时候出现了这个错误，&lt;code&gt;openai.error.RateLimitError: You exceeded your current quota, please check your plan and billing details.&lt;/code&gt; 唉，这可咋整？&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="每日文章" scheme="https://weicun581.github.io/tags/%E6%AF%8F%E6%97%A5%E6%96%87%E7%AB%A0/"/>
    
    <category term="AI" scheme="https://weicun581.github.io/tags/AI/"/>
    
    <category term="chatGPT" scheme="https://weicun581.github.io/tags/chatGPT/"/>
    
  </entry>
  
  <entry>
    <title>博客评论区开放国内评论功能</title>
    <link href="https://weicun581.github.io/2023/05/29/12%20%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E5%8C%BA%E5%BC%80%E6%94%BE%E5%9B%BD%E5%86%85%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <id>https://weicun581.github.io/2023/05/29/12%20%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E5%8C%BA%E5%BC%80%E6%94%BE%E5%9B%BD%E5%86%85%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</id>
    <published>2023-05-29T03:03:00.000Z</published>
    <updated>2023-06-01T08:54:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>域名已经重新申请了，目前也可以支持大陆地区用户使用了。</p></blockquote><span id="more"></span><p>欢迎下面评论留言，会第一时间回复您的。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;域名已经重新申请了，目前也可以支持大陆地区用户使用了。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="https://weicun581.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>博客评论暂停大陆地区使用公告</title>
    <link href="https://weicun581.github.io/2023/05/26/13%20%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E6%9A%82%E5%81%9C%E5%A4%A7%E9%99%86%E5%9C%B0%E5%8C%BA%E4%BD%BF%E7%94%A8%E5%85%AC%E5%91%8A/"/>
    <id>https://weicun581.github.io/2023/05/26/13%20%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E6%9A%82%E5%81%9C%E5%A4%A7%E9%99%86%E5%9C%B0%E5%8C%BA%E4%BD%BF%E7%94%A8%E5%85%AC%E5%91%8A/</id>
    <published>2023-05-26T02:26:00.000Z</published>
    <updated>2023-06-01T08:35:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于域名到期，暂时不在支持大陆地区用户使用本博客的评论功能，如果你有魔法or梯子，将不会影响你的使用。</p></blockquote><span id="more"></span><p>目前的使用的博客系统是waline，挂载在vercel服务器上，但是vercel域名被挡住了，所以之前有购买一个域名，DNS解析到vercel上，因此国内用户才可以正常评论。<br>但是现在域名到期了，所以将使用vercel自带的域名，因此请大家八仙过海、各显神通，把魔法用起来。<br>欢迎评论你对the great wall的看法？</p><ul><li><input disabled="" type="checkbox"> 支持？外面世界太乱了，ZF是在保护我们。</li><li><input disabled="" type="checkbox"> 反对？阻碍交流</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;由于域名到期，暂时不在支持大陆地区用户使用本博客的评论功能，如果你有魔法or梯子，将不会影响你的使用。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>OpenAI ChatGPT3.5-turbo实际解决问题能力评测</title>
    <link href="https://weicun581.github.io/2023/05/22/26%20OpenAI%20ChatGPT3.5-turbo%E5%AE%9E%E9%99%85%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E8%83%BD%E5%8A%9B%E8%AF%84%E6%B5%8B/"/>
    <id>https://weicun581.github.io/2023/05/22/26%20OpenAI%20ChatGPT3.5-turbo%E5%AE%9E%E9%99%85%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E8%83%BD%E5%8A%9B%E8%AF%84%E6%B5%8B/</id>
    <published>2023-05-22T07:19:00.000Z</published>
    <updated>2023-06-01T08:35:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>​程序员在coding的时候会经常遇到需要查阅资料的情况，最好的结果是直接能拿到一份好用的demo版本code，本次我们来评测：bing搜索和chatGPT3.5，解决实际问题：“html 图片靠左”的效果。</p></blockquote><span id="more"></span><div style="display:inline-block;"><img width="80%" style="float:center;" src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522152417.png" alt="20230522152417"></div>   <h3 id="bing搜索的表现"><a href="#bing搜索的表现" class="headerlink" title="bing搜索的表现"></a>bing搜索的表现</h3><ul><li>搜索关键字：<font color="#ff0000">html 图片靠左</font></li><li>得到的结果如下： <div style="display:inline-block;"><img width="100%" style="float:left;" src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522152828.png" alt="20230522152828"></div></li><li>每个结果我都点击进去看了，并没有我想要的demo code。</li><li>每个搜索结果，demo code也无法运行，有的可以，有的不可以。</li></ul><h3 id="chatGPT3-5的表现"><a href="#chatGPT3-5的表现" class="headerlink" title="chatGPT3.5的表现"></a>chatGPT3.5的表现</h3><p>第一次询问：<font color="#ff0000">html中img如何靠左显示</font><br>答：</p><div style="display:inline-block;"><img width="60%" style="float:left; margin-right: 10px;" src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522153101.png" alt="20230522153101"></div><p>第二次询问：<font color="#ff0000">如何在当行语句中设置图片靠左</font><br><font color="#00b0f0">注意看，我还写了一个错别字，chatGPT完美的理解了我的意思。</font><br>答：</p><div style="display:inline-block;"><img width="60%" style="float:left; margin-right: 10px;" src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522153221.png" alt="20230522153221"></div><p>第三次询问：<font color="#ff0000">看上去他是悬浮在段落里了，如何能让他不是悬浮在段落里?</font><br>答：</p><div style="display:inline-block;"><img width="60%" style="float:left; margin-right: 10px;" src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522153449.png" alt="20230522153449"></div><p>经过三次询问，我得到了想要的答案：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;your-image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Your Image&quot;</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle; margin-right: 10px;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>chatGPT明显强于bing搜索，其<font color="#ff0000">最大的亮点就是上下午语境联系能力</font>，我仅仅通过三个问题就得到了答案，而且还解决了一个问题。<br>所以，chatGPT在解决问题上的确给人眼前一亮的感觉，如果你能好好利用它，它一定能给你助力不少。<br>对于搜索行业来说，chatGPT绝对是颠覆性的。</p><hr><p>对了，如果大家对AI、新技术、软件评测感兴趣，可以关注我的微信公众号：<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20220901100734.png" alt="image-20220328170047757|left" style="zoom: 12.5%;" />或者个人博客：<a href="https://weicun.gitee.io/">https://weicun.gitee.io/</a>  <a href="https://weicun.gitee.io/">蓝色单车</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;​	程序员在coding的时候会经常遇到需要查阅资料的情况，最好的结果是直接能拿到一份好用的demo版本code，本次我们来评测：bing搜索和chatGPT3.5，解决实际问题：“html 图片靠左”的效果。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="每日文章" scheme="https://weicun581.github.io/tags/%E6%AF%8F%E6%97%A5%E6%96%87%E7%AB%A0/"/>
    
    <category term="AI" scheme="https://weicun581.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客查图片并调整位置&amp;大小</title>
    <link href="https://weicun581.github.io/2023/05/22/22%20Hexo%E5%8D%9A%E5%AE%A2%E6%9F%A5%E5%9B%BE%E7%89%87%E5%B9%B6%E8%B0%83%E6%95%B4%E4%BD%8D%E7%BD%AE&amp;%E5%A4%A7%E5%B0%8F/"/>
    <id>https://weicun581.github.io/2023/05/22/22%20Hexo%E5%8D%9A%E5%AE%A2%E6%9F%A5%E5%9B%BE%E7%89%87%E5%B9%B6%E8%B0%83%E6%95%B4%E4%BD%8D%E7%BD%AE&amp;%E5%A4%A7%E5%B0%8F/</id>
    <published>2023-05-22T06:02:00.000Z</published>
    <updated>2023-06-01T08:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🌈<strong>Description</strong>：<br>​Markdown写文章插入图片，<font color="#ff0000">在hexo博客中，图片的大小似乎没有按照个markdown的语法生效</font>，本文将解决此问题。</p></blockquote><span id="more"></span><div style="display:inline-block;"><img width="50%" style="float:center " src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522141323.png" alt="20230522144603"></div><h3 id="现有问题描述"><a href="#现有问题描述" class="headerlink" title="现有问题描述"></a><font color="#ff0000">现有问题描述</font></h3><p>obsidian中插入图片的语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![20230522135434|left](https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522135434.png)</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>默认靠左显示。</li><li>可以利用ob的插件快速调整大小：alt + 鼠标滚轮调整大小。<br>缺点：</li><li>ob中调整的大小，在hexo博客中无法正确显示。</li></ul><h3 id="Hexo博客插入图片的方法"><a href="#Hexo博客插入图片的方法" class="headerlink" title="Hexo博客插入图片的方法"></a>Hexo博客插入图片的方法</h3><p>首先说下hexo插入图片的方式有哪些，hexo默认集成了markdown语法，这里我们就markdown里显示图片的方式引入html方法,两种方法有优有劣，关键看自己的习惯了</p><ul><li>第一种是直接引用markdown插入</li><li>第二种是使用html来引用插入</li></ul><h4 id="1-直接引用markdown插入"><a href="#1-直接引用markdown插入" class="headerlink" title="1-直接引用markdown插入"></a>1-直接引用markdown插入</h4><p>首先是直接引用的方法需要在images目录里放入需要引入的图片<br><code>![lena](https://alexcld.com/images/pengyuyan.jpg)</code><br>我这里就直接引用之前的图片了，图片链接自己可以在网上找，<br>本地图片的话可以直接使用路径来引用<br>这种方法可以是可以，有点小缺点：图片就会靠在左侧，大小也不由自己决定</p><h4 id="2-使用html方法引入"><a href="#2-使用html方法引入" class="headerlink" title="2-使用html方法引入"></a>2-使用html方法引入</h4><p>第二种就是使用html来引用插入的图片<br><code>&lt;img src=&quot;https://alexcld.com/images/pengyuyan.jpg&quot; width=256 height=256 /&gt;</code><br>固定图片大小：width&#x3D;256,height&#x3D;256设置的是显示图像的尺寸，src后面接的就是图像对象<br>还可以使用百分比的方式来给width,height传参<br><code>&lt;img src=&quot;https://alexcld.com/images/pengyuyan.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;</code><br>其中width和height后面的50%就是根据窗口的大小以一定的比例显示图片。值得一说的是，这种按照百分比显示方法，是以width方向为准，并保持纵横比的，换句话说，把设置width的部分去掉，height的值改为任<br>意百分比，显示的图像都是原图大小（个人觉得这根博客窗口有关，毕竟现实截面的宽度相对是固定的，而高度&#x2F;长度却是变化着的）。因此用此方法的时候，可以把height设置缺省</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><font color="#ff0000">总结</font></h3><p>最后使用的hexo插入图片语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;float: left; margin-right: 10px;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522141323.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这种方法虽然有效果，但是会使图片处在悬浮状态，影响体验，解决方法是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display:inline-block;&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;10%&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522141323.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Your Image&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float: left; margin-right: 10px;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际效果：</p><div style="display: inline-block;"> <img  width="10%" src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522141323.png" alt="Your Image" style="float: left; margin-right: 10px;"> </div>PS: 原本的语法：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![20230522141323|left|400](https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522141323.png)</span><br></pre></td></tr></table></figure><p>效果对比（左边是原本的，右边是修改后的）：</p><div style="display:inline-block;"><img width="100%" style="float:left; margin-right: 10px;" src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522151213.png" alt="20230522151213"></div><h3 id="如何实际使用"><a href="#如何实际使用" class="headerlink" title="如何实际使用"></a><font color="#ff0000">如何实际使用</font></h3><p>需要修改Picgo图床的自定义链接格式，原本的自定义链接格式：<br><code>![$fileName|left]($url)</code><br>修改后的自定义链接格式：<br><code>&lt;div style=&quot;display:inline-block;&quot;&gt;&lt;img width=&quot;100%&quot; style=&quot;float:left; margin-right: 10px;&quot; src=&quot;$url&quot; alt=&quot;$fileName&quot;&gt;&lt;/div&gt;</code><br>实际效果： </p><ul><li>靠左显示：<div style="display:inline-block;"><img width="15%" style="float:left; margin-right: 10px;" src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522144603.png" alt="20230522144603"></div></li><li>居中显示：<div style="display:inline-block;"><img width="15%" style="float:center; margin-right: 10px;" src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522144603.png" alt="20230522144603"></div></li><li>靠右显示：<div style="display:inline-block;"><img width="15%" style="float:right; margin-right: 10px;" src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230522144603.png" alt="20230522144603"></div></li></ul><hr><h3 id="🌈参考："><a href="#🌈参考：" class="headerlink" title="🌈参考："></a>🌈参考：</h3><ol><li><a href="https://blog.csdn.net/weixin_45509582/article/details/108582689">hexo插入图片及控制大小_AlexClownfish的博客-CSDN博客</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🌈&lt;strong&gt;Description&lt;/strong&gt;：&lt;br&gt;​	Markdown写文章插入图片，&lt;font color=&quot;#ff0000&quot;&gt;在hexo博客中，图片的大小似乎没有按照个markdown的语法生效&lt;/font&gt;，本文将解决此问题。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="https://weicun581.github.io/tags/hexo/"/>
    
    <category term="每日文章" scheme="https://weicun581.github.io/tags/%E6%AF%8F%E6%97%A5%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客next主题添加点击特效</title>
    <link href="https://weicun581.github.io/2023/05/06/23%20Hexo%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88/"/>
    <id>https://weicun581.github.io/2023/05/06/23%20Hexo%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88/</id>
    <published>2023-05-06T02:00:00.000Z</published>
    <updated>2025-02-25T06:18:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🌈<strong>Description</strong>：<br>​博客折腾的差不多了，开始整一些花活了，这次就给博客添加下点击特效，基本效果如下：</p></blockquote><span id="more"></span><div style="display:inline-block;"><img width="40%" style="float:center " src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230506100148.png" alt="20230522144603"></div><p>好了闲言少叙，直接上干货：</p><ol><li><p>在<code>E:\2_Git\Hexo_Blog\node_modules\hexo-theme-next\source\js</code>下新建文件<code>fireworks.js</code>并写入以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="keyword">function</span> <span class="title function_">updateCoords</span>(<span class="params">e</span>)&#123;pointerX=(e.<span class="property">clientX</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>)-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span>,pointerY=e.<span class="property">clientY</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span>-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>&#125;<span class="keyword">function</span> <span class="title function_">setParticuleDirection</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> t=anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">360</span>)*<span class="title class_">Math</span>.<span class="property">PI</span>/<span class="number">180</span>,a=anime.<span class="title function_">random</span>(<span class="number">50</span>,<span class="number">180</span>),n=[-<span class="number">1</span>,<span class="number">1</span>][anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.<span class="property">x</span>+n*<span class="title class_">Math</span>.<span class="title function_">cos</span>(t),<span class="attr">y</span>:e.<span class="property">y</span>+n*<span class="title class_">Math</span>.<span class="title function_">sin</span>(t)&#125;&#125;<span class="keyword">function</span> <span class="title function_">createParticule</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=colors[anime.<span class="title function_">random</span>(<span class="number">0</span>,colors.<span class="property">length</span>-<span class="number">1</span>)],a.<span class="property">radius</span>=anime.<span class="title function_">random</span>(<span class="number">16</span>,<span class="number">32</span>),a.<span class="property">endPos</span>=<span class="title function_">setParticuleDirection</span>(a),a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">fillStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">fill</span>()&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">createCircle</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=<span class="string">&quot;#F00&quot;</span>,a.<span class="property">radius</span>=<span class="number">0.1</span>,a.<span class="property">alpha</span>=<span class="number">0.5</span>,a.<span class="property">lineWidth</span>=<span class="number">6</span>,a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="property">globalAlpha</span>=a.<span class="property">alpha</span>,ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">lineWidth</span>=a.<span class="property">lineWidth</span>,ctx.<span class="property">strokeStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">stroke</span>(),ctx.<span class="property">globalAlpha</span>=<span class="number">1</span>&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">renderParticule</span>(<span class="params">e</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.<span class="property">animatables</span>.<span class="property">length</span>;t++)&#123;e.<span class="property">animatables</span>[t].<span class="property">target</span>.<span class="title function_">draw</span>()&#125;&#125;<span class="keyword">function</span> <span class="title function_">animateParticules</span>(<span class="params">e,t</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="title function_">createCircle</span>(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class="title function_">push</span>(<span class="title function_">createParticule</span>(e,t))&#125;anime.<span class="title function_">timeline</span>().<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">x</span>&#125;,<span class="attr">y</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">y</span>&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.<span class="title function_">random</span>(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> n=<span class="variable language_">this</span>,i=<span class="variable language_">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;e.<span class="title function_">apply</span>(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;canvasEl.<span class="property">width</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerWidth</span>,canvasEl.<span class="property">height</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerHeight</span>,canvasEl.<span class="property">style</span>.<span class="property">width</span>=<span class="variable language_">window</span>.<span class="property">innerWidth</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="property">style</span>.<span class="property">height</span>=<span class="variable language_">window</span>.<span class="property">innerHeight</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>).<span class="title function_">scale</span>(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=<span class="title function_">anime</span>(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,canvasEl.<span class="property">width</span>,canvasEl.<span class="property">height</span>)&#125;&#125;);<span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(tap,<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="string">&quot;sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;(render.<span class="title function_">play</span>(),<span class="title function_">updateCoords</span>(e),<span class="title function_">animateParticules</span>(pointerX,pointerY))&#125;,!<span class="number">1</span>),<span class="title function_">setCanvasSize</span>(),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">&quot;use strict&quot;</span>;<span class="keyword">function</span> <span class="title function_">updateCoords</span>(<span class="params">e</span>)&#123;pointerX=(e.<span class="property">clientX</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>)-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span>,pointerY=e.<span class="property">clientY</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span>-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>&#125;<span class="keyword">function</span> <span class="title function_">setParticuleDirection</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> t=anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">360</span>)*<span class="title class_">Math</span>.<span class="property">PI</span>/<span class="number">180</span>,a=anime.<span class="title function_">random</span>(<span class="number">50</span>,<span class="number">180</span>),n=[-<span class="number">1</span>,<span class="number">1</span>][anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.<span class="property">x</span>+n*<span class="title class_">Math</span>.<span class="title function_">cos</span>(t),<span class="attr">y</span>:e.<span class="property">y</span>+n*<span class="title class_">Math</span>.<span class="title function_">sin</span>(t)&#125;&#125;<span class="keyword">function</span> <span class="title function_">createParticule</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=colors[anime.<span class="title function_">random</span>(<span class="number">0</span>,colors.<span class="property">length</span>-<span class="number">1</span>)],a.<span class="property">radius</span>=anime.<span class="title function_">random</span>(<span class="number">16</span>,<span class="number">32</span>),a.<span class="property">endPos</span>=<span class="title function_">setParticuleDirection</span>(a),a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">fillStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">fill</span>()&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">createCircle</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=<span class="string">&quot;#F00&quot;</span>,a.<span class="property">radius</span>=<span class="number">0.1</span>,a.<span class="property">alpha</span>=<span class="number">0.5</span>,a.<span class="property">lineWidth</span>=<span class="number">6</span>,a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="property">globalAlpha</span>=a.<span class="property">alpha</span>,ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">lineWidth</span>=a.<span class="property">lineWidth</span>,ctx.<span class="property">strokeStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">stroke</span>(),ctx.<span class="property">globalAlpha</span>=<span class="number">1</span>&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">renderParticule</span>(<span class="params">e</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.<span class="property">animatables</span>.<span class="property">length</span>;t++)&#123;e.<span class="property">animatables</span>[t].<span class="property">target</span>.<span class="title function_">draw</span>()&#125;&#125;<span class="keyword">function</span> <span class="title function_">animateParticules</span>(<span class="params">e,t</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="title function_">createCircle</span>(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class="title function_">push</span>(<span class="title function_">createParticule</span>(e,t))&#125;anime.<span class="title function_">timeline</span>().<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">x</span>&#125;,<span class="attr">y</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">y</span>&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.<span class="title function_">random</span>(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> n=<span class="variable language_">this</span>,i=<span class="variable language_">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;e.<span class="title function_">apply</span>(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;canvasEl.<span class="property">width</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerWidth</span>,canvasEl.<span class="property">height</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerHeight</span>,canvasEl.<span class="property">style</span>.<span class="property">width</span>=<span class="variable language_">window</span>.<span class="property">innerWidth</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="property">style</span>.<span class="property">height</span>=<span class="variable language_">window</span>.<span class="property">innerHeight</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>).<span class="title function_">scale</span>(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=<span class="title function_">anime</span>(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,canvasEl.<span class="property">width</span>,canvasEl.<span class="property">height</span>)&#125;&#125;);<span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(tap,<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="string">&quot;sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;(render.<span class="title function_">play</span>(),<span class="title function_">updateCoords</span>(e),<span class="title function_">animateParticules</span>(pointerX,pointerY))&#125;,!<span class="number">1</span>),<span class="title function_">setCanvasSize</span>(),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在<code>E:\2_Git\Hexo_Blog\node_modules\hexo-theme-next\layout\_layout.njk</code>中的<code>&lt;body&gt;</code>块中添加如下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &#123;% if theme.fireworks %&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;fireworks&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/fireworks.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>E:\2_Git\Hexo_Blog\_config.next.yml</code>文末添加：<br><code>fireworks: true</code></p></li><li><p>重启hexo博客就任意位置点击就可以看到这个效果啦<br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230506100148.png" alt="20230506100148|left|450"></p></li></ol><hr><p><font color="#ff0000">2024-8-27 回来说一下</font><br>这个特效会严重拖慢网速，打开网站打开的时候卡顿验证，所以我已经不用了，关掉之后网站刷新速度明显快了很多。</p><hr><h3 id="🌈参考："><a href="#🌈参考：" class="headerlink" title="🌈参考："></a>🌈参考：</h3><ol><li><a href="https://blog.csdn.net/Awt_FuDongLai/article/details/107463289">hexo笔记十三：next主题增加点击特效_小镇攻城狮的博客-CSDN博客</a></li><li><a href="https://nuosferatu.github.io/2020/06/12/NexT-Click-Effect/">NexT 主题博客添加鼠标点击烟花特效 | Nuosferatu’s Blog</a></li><li></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🌈&lt;strong&gt;Description&lt;/strong&gt;：&lt;br&gt;​	博客折腾的差不多了，开始整一些花活了，这次就给博客添加下点击特效，基本效果如下：&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="https://weicun581.github.io/tags/hexo/"/>
    
    <category term="每日文章" scheme="https://weicun581.github.io/tags/%E6%AF%8F%E6%97%A5%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>163、QQ邮箱收不到Github的邮件解决方法</title>
    <link href="https://weicun581.github.io/2023/05/05/10%20163%E3%80%81QQ%E9%82%AE%E7%AE%B1%E6%94%B6%E4%B8%8D%E5%88%B0Github%E7%9A%84%E9%82%AE%E4%BB%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://weicun581.github.io/2023/05/05/10%20163%E3%80%81QQ%E9%82%AE%E7%AE%B1%E6%94%B6%E4%B8%8D%E5%88%B0Github%E7%9A%84%E9%82%AE%E4%BB%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2023-05-05T09:09:00.000Z</published>
    <updated>2023-06-01T08:38:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🌈<strong>Description</strong>：<br>​国内的好多邮箱收不到github的mail，无法收到github上的通知、留言，这个让人很苦恼，无法及时沟通，所以本文会给出解决方法。</p></blockquote><span id="more"></span><div style="display:inline-block;"><img width="40%" style="float:center " src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230505171221.png" alt="20230522144603"></div><p>注册GitHub需要进行邮箱激活验证，否则不能创建仓库，码笔记发现使用QQ邮箱、163邮箱等国内常见邮箱可能收不到激活邮件，这是什么原因呢？码笔记分享GitHub收不到激活邮件的解决方法：</p><h2 id="GitHub收不到邮件的解决方法"><a href="#GitHub收不到邮件的解决方法" class="headerlink" title="GitHub收不到邮件的解决方法"></a>GitHub收不到邮件的解决方法</h2><p>GitHub需要“Please verify your email address”，否则不能使用GitHub。国内常见的邮箱QQ邮箱或者163邮箱等可能会收不到GitHub发来的激活验证邮件，那么如何解决呢？</p><h3 id="将GitHub设置到邮箱白名单即可"><a href="#将GitHub设置到邮箱白名单即可" class="headerlink" title="将GitHub设置到邮箱白名单即可"></a>将GitHub设置到邮箱白名单即可</h3><p>码笔记以QQ邮箱为例，将GitHub加入到邮箱白名单即可。登录到你的邮箱，点击【设置】-【反垃圾】-【白名单】，将<code>github.com</code>添加到邮箱白名单即可，如下图所示：<br><a href="https://www.mabiji.com/wp-content/uploads/2019/11/baimingdan.jpg"><img src="https://www.mabiji.com/wp-content/uploads/2019/11/baimingdan.jpg" alt="github.com添加到邮箱白名单"></a></p><p>github.com添加到邮箱白名单</p><p>然后在GitHub端，点击重新发送邮件“Resend”，即可收到GitHub发来的邮件，在邮件中点击“verify email address”即可完成邮箱验证。</p><p>对了，如果大家对AI、新技术、软件评测感兴趣，可以关注我的微信公众号：<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20220901100734.png" alt="image-20220328170047757|left" style="zoom: 12.5%;" />或者个人博客：<a href="https://weicun.gitee.io/">https://weicun.gitee.io/</a>  <a href="https://weicun.gitee.io/">蓝色单车</a></p><hr><h3 id="🌈参考："><a href="#🌈参考：" class="headerlink" title="🌈参考："></a>🌈参考：</h3><ol><li><a href="https://www.mabiji.com/github/github-email.html#:~:text=%E5%9B%BD%E5%86%85%E5%B8%B8%E8%A7%81%E7%9A%84%E9%82%AE%E7%AE%B1QQ%E9%82%AE%E7%AE%B1%E6%88%96%E8%80%85163%E9%82%AE%E7%AE%B1%E7%AD%89%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%94%B6%E4%B8%8D%E5%88%B0GitHub%E5%8F%91%E6%9D%A5%E7%9A%84%E6%BF%80%E6%B4%BB%E9%AA%8C%E8%AF%81%E9%82%AE%E4%BB%B6%EF%BC%8C%E9%82%A3%E4%B9%88%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%91%A2%EF%BC%9F%20%E5%B0%86GitHub%E8%AE%BE%E7%BD%AE%E5%88%B0%E9%82%AE%E7%AE%B1%E7%99%BD%E5%90%8D%E5%8D%95%E5%8D%B3%E5%8F%AF%20%E7%A0%81%E7%AC%94%E8%AE%B0%E4%BB%A5QQ%E9%82%AE%E7%AE%B1%E4%B8%BA%E4%BE%8B%EF%BC%8C%E5%B0%86GitHub%E5%8A%A0%E5%85%A5%E5%88%B0%E9%82%AE%E7%AE%B1%E7%99%BD%E5%90%8D%E5%8D%95%E5%8D%B3%E5%8F%AF%E3%80%82%20%E7%99%BB%E5%BD%95%E5%88%B0%E4%BD%A0%E7%9A%84%E9%82%AE%E7%AE%B1%EF%BC%8C%E7%82%B9%E5%87%BB%E3%80%90%E8%AE%BE%E7%BD%AE%E3%80%91-%E3%80%90%E5%8F%8D%E5%9E%83%E5%9C%BE%E3%80%91-%E3%80%90%E7%99%BD%E5%90%8D%E5%8D%95%E3%80%91%EF%BC%8C%E5%B0%86github.com%E6%B7%BB%E5%8A%A0%E5%88%B0%E9%82%AE%E7%AE%B1%E7%99%BD%E5%90%8D%E5%8D%95%E5%8D%B3%E5%8F%AF%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A,github.com%E6%B7%BB%E5%8A%A0%E5%88%B0%E9%82%AE%E7%AE%B1%E7%99%BD%E5%90%8D%E5%8D%95%20%E7%84%B6%E5%90%8E%E5%9C%A8GitHub%E7%AB%AF%EF%BC%8C%E7%82%B9%E5%87%BB%E9%87%8D%E6%96%B0%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E2%80%9CResend%E2%80%9D%EF%BC%8C%E5%8D%B3%E5%8F%AF%E6%94%B6%E5%88%B0GitHub%E5%8F%91%E6%9D%A5%E7%9A%84%E9%82%AE%E4%BB%B6%EF%BC%8C%E5%9C%A8%E9%82%AE%E4%BB%B6%E4%B8%AD%E7%82%B9%E5%87%BB%E2%80%9Cverify%20email%20address%E2%80%9D%E5%8D%B3%E5%8F%AF%E5%AE%8C%E6%88%90%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E3%80%82">GitHub收不到邮件的解决方法 | 码笔记</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🌈&lt;strong&gt;Description&lt;/strong&gt;：&lt;br&gt;​	国内的好多邮箱收不到github的mail，无法收到github上的通知、留言，这个让人很苦恼，无法及时沟通，所以本文会给出解决方法。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="每日文章" scheme="https://weicun581.github.io/tags/%E6%AF%8F%E6%97%A5%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>不用魔法免费使用类chatGPT聊天</title>
    <link href="https://weicun581.github.io/2023/05/05/14%20%E4%B8%8D%E7%94%A8%E9%AD%94%E6%B3%95%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8%E7%B1%BBchatGPT%E8%81%8A%E5%A4%A9/"/>
    <id>https://weicun581.github.io/2023/05/05/14%20%E4%B8%8D%E7%94%A8%E9%AD%94%E6%B3%95%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8%E7%B1%BBchatGPT%E8%81%8A%E5%A4%A9/</id>
    <published>2023-05-05T05:55:00.000Z</published>
    <updated>2023-05-05T08:41:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🌈<strong>Description</strong>：<br>​不需要魔法，不用搭梯子，免费不受限制的使用类 chatGPT 聊天。</p></blockquote><span id="more"></span><p>我们将类 chatGPT 接入到了微信公众号，你可以跟他聊天，询问天气，甚至是骂它俩句，他绝对不会还嘴的，哈哈哈。<br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20220901100734.png" alt="image-20220328170047757|left" style="zoom: 12.5%;" />或者个人博客：<a href="https://weicun.gitee.io/">https://weicun.gitee.io/</a>  <a href="https://weicun.gitee.io/">蓝色单车</a><br><font color="#ff0000">关注公众号，直接发消息就可以愉快的聊天啦。</font><br>放几张聊天截图，感受喜爱它的小脾气吧：<br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230505135849.png" alt="20230505135849|100|left|300"><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230505140136.png" alt="20230505140136|left|300"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🌈&lt;strong&gt;Description&lt;/strong&gt;：&lt;br&gt;​	不需要魔法，不用搭梯子，免费不受限制的使用类 chatGPT 聊天。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>免费域名申请</title>
    <link href="https://weicun581.github.io/2023/04/28/15%20%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/"/>
    <id>https://weicun581.github.io/2023/04/28/15%20%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/</id>
    <published>2023-04-28T02:16:00.000Z</published>
    <updated>2023-06-01T08:38:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🌈<strong>Description</strong>：<br>​本文将介绍如何免费申请域名，在最近的折腾中发现，域名真的很重要，不然好多服务是无法访问的。</p></blockquote><span id="more"></span><p><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230428153405.png" alt="20230428153405|left|500"></p><p><strong>备注</strong>：由于freenom基于技术原因，暂时停止免费域名的申请，所以最后作者是在阿里云里面花了6块钱申请了域名。</p><h3 id="Freenom注册域名"><a href="#Freenom注册域名" class="headerlink" title="Freenom注册域名"></a>Freenom注册域名</h3><ul><li>官网：<a href="https://www.freenom.com/zh/index.html?lang=zh">Freenom - 人人都熟悉的名字</a></li><li>实测无法注册新的免费域名了：<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230428104025.png" alt="20230428104025|left|500"></li></ul><h3 id="阿里云申请域名"><a href="#阿里云申请域名" class="headerlink" title="阿里云申请域名"></a>阿里云申请域名</h3><ul><li>官网：<a href="https://wanwang.aliyun.com/domain/searchresult/?keyword=helloworld&suffix=.com#?keyword=lansedanche&suffix=life">域名查询结果_域名信息_域名交易-万网-阿里云旗下品牌</a></li><li>找到比较便宜的域名：<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230428110130.png" alt="20230428110130|left"></li></ul><h3 id="域名比价查询网站"><a href="#域名比价查询网站" class="headerlink" title="域名比价查询网站"></a>域名比价查询网站</h3><p>对比域名价格的网站（需要挂梯子）：<br><a href="https://www.nazhumi.com/">哪煮米 - 全网域名,一站比价</a></p><h3 id="如果你有教育邮箱的话"><a href="#如果你有教育邮箱的话" class="headerlink" title="如果你有教育邮箱的话"></a>如果你有教育邮箱的话</h3><p><a href="https://nc.me/">Site Unreachable</a> ，倒是可以免费注册.me，不过需要那边认可的教育邮箱。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🌈&lt;strong&gt;Description&lt;/strong&gt;：&lt;br&gt;​	本文将介绍如何免费申请域名，在最近的折腾中发现，域名真的很重要，不然好多服务是无法访问的。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="每日文章" scheme="https://weicun581.github.io/tags/%E6%AF%8F%E6%97%A5%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>为Hexo博客next主题添加友链</title>
    <link href="https://weicun581.github.io/2023/04/27/17%20%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE/"/>
    <id>https://weicun581.github.io/2023/04/27/17%20%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE/</id>
    <published>2023-04-27T07:34:00.000Z</published>
    <updated>2023-06-01T08:39:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🌈<strong>Description</strong>：<br>​本文将介绍如何为Hexo博客next主题添加友链，方便你与其他博主进行联系，同时可以引流。</p></blockquote><span id="more"></span><p><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230427153826.png" alt="20230427153826|left"></p><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p>先看实际效果，如果感觉ok，就可以继续往下看，否则请节省时间逛逛别的文章：<br><a href="http://localhost:4000/links/">链接在这里</a><br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230427154005.png" alt="20230427154005|left|500"></p><h3 id="添加友链的方法"><a href="#添加友链的方法" class="headerlink" title="添加友链的方法"></a>添加友链的方法</h3><h4 id="修改hexo的next主题配置文件-config-next-yml"><a href="#修改hexo的next主题配置文件-config-next-yml" class="headerlink" title="修改hexo的next主题配置文件_config.next.yml"></a>修改hexo的next主题配置文件_config.next.yml</h4><p>我的_config.next.yml是在根目录下，打开后，在menu节点下，添加这一行：<br><code>link: /links/ || fa fa-link</code></p><h4 id="将配置文件中的link备注中文名称"><a href="#将配置文件中的link备注中文名称" class="headerlink" title="将配置文件中的link备注中文名称"></a>将配置文件中的link备注中文名称</h4><p>打开目录<code>Hexo_Blog\node_modules\hexo-theme-next\languages</code>，打开文件<code>zh-CN.yml</code>，在menu节点下添加这一行：<br><code>link: 友链</code></p><h4 id="添加友链页面"><a href="#添加友链页面" class="headerlink" title="添加友链页面"></a>添加友链页面</h4><p>打开目录<code>Hexo_Blog\source</code>新建文件夹<code>links</code>，在<code>Hexo_Blog\source\links</code>下新建文件<code>index.md</code>，添加如下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2023-04-26 00:34:27</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-body&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;links&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">         <span class="selector-class">.links-content</span>&#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">margin-top</span>:<span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">         <span class="selector-class">.link-navigation</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">         <span class="selector-class">.card</span> &#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">width</span>: <span class="number">45%</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">transition-duration</span>: <span class="number">0.15s</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">display</span>:flex;</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">         <span class="selector-class">.card</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">         <span class="selector-class">.card</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">         <span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span></span><br><span class="line"><span class="language-css">         <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">6px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.12</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.04</span>);</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">         <span class="selector-class">.card</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">border</span>:none;</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">         <span class="selector-class">.card</span> <span class="selector-class">.ava</span> &#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">width</span>: <span class="number">3rem</span><span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">height</span>: <span class="number">3rem</span><span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">margin</span>:<span class="number">0</span><span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">margin-right</span>: <span class="number">1em</span><span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">border-radius</span>:<span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">         <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> &#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">font-style</span>: italic;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">         <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">font-style</span>: normal;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">color</span>: <span class="number">#2bbc8a</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">         <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">color</span>: <span class="number">#d480aa</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">         <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> <span class="selector-class">.info</span> &#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">font-style</span>:normal;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">color</span>:<span class="number">#a3a3a3</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">font-size</span>:<span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">min-width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-content&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;link-navigation&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;ava&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://laosu.ml/images/laosu_wx.jpg&quot;</span> /&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://laosu.ml/&quot;</span>&gt;</span>杨浦老苏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span>聚沙成塔，集腋成裘 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;ava&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://weicun.gitee.io/images/logo.png&quot;</span> /&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://weicun.gitee.io/&quot;</span>&gt;</span>蓝色单车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span>软件评测、AI、感悟，分享好玩的东东<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你想单车一样用 obsidian 编辑器对 html 编辑不友好，建议在 VS code 或者 sublime text 里面编辑好在粘贴过来。（跟新：建议直接用 sublime text 去编辑就好，不要用 ob 去编辑）。<br>如果有小伙伴请求添加友链，你只需要在上述代码的技术上添加如下代码块即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;ava&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://laosu.ml/images/laosu_wx.jpg&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://laosu.ml/&quot;</span>&gt;</span>杨浦老苏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span>聚沙成塔，集腋成裘 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里添加了我最喜欢的一个博主：<a href="https://laosu.ml/">老苏的博客</a>，虽然没有经过他的允许，但是我还是很想把他分享给大家，因为他的文章的确是纯纯的干货文章。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>好了，至此我们已经完成了全部工作，回顾下其实就三个步骤：</p><ul><li>修改hexo的next主题配置文件_config.next.yml </li><li>将配置文件中的link备注中文名称</li><li>添加友链页面<br>现在你可以部署你的hexo博客看效果了（<code>hexo clean、hexo g、hexo s、hexo d</code>）,希望能看到你满意的效果。<br>有什么问题欢迎留言。</li></ul><p>对了，如果大家喜欢可以关注我的博客和微信公众号，平时会经常分享一下软件、AI、感悟、好玩的东东。谢谢啦。<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20220901100734.png" alt="image-20220328170047757|left" style="zoom: 12.5%;" />或者个人博客：<a href="https://weicun.gitee.io/">https://weicun.gitee.io/</a>  <a href="https://weicun.gitee.io/">蓝色单车</a></p><hr><h3 id="🌈参考："><a href="#🌈参考：" class="headerlink" title="🌈参考："></a>🌈参考：</h3><p>1.<br>2.<br>3. </p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🌈&lt;strong&gt;Description&lt;/strong&gt;：&lt;br&gt;​	本文将介绍如何为Hexo博客next主题添加友链，方便你与其他博主进行联系，同时可以引流。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="https://weicun581.github.io/tags/hexo/"/>
    
    <category term="每日文章" scheme="https://weicun581.github.io/tags/%E6%AF%8F%E6%97%A5%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg用法</title>
    <link href="https://weicun581.github.io/2023/04/25/21%20Ffmpeg%E7%94%A8%E6%B3%95/"/>
    <id>https://weicun581.github.io/2023/04/25/21%20Ffmpeg%E7%94%A8%E6%B3%95/</id>
    <published>2023-04-25T08:44:00.000Z</published>
    <updated>2023-05-05T02:46:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🌈<strong>Description</strong>：<br>​本文主要介绍ffmpeg的各种用法，纯纯干货，请慢慢咀嚼，管饱。</p></blockquote><span id="more"></span><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><ul><li>win10安装ffmpeg<ul><li>官网：<a href="https://ffmpeg.org/">Site Unreachable</a></li><li>下载页面：<a href="https://ffmpeg.org/download.html">Download FFmpeg</a></li><li>下载完成后直接进行解压，然后配置环境变量就OK了</li></ul></li><li>百度网盘下载：<ul><li>链接：<a href="https://pan.baidu.com/s/1Jk119himVJhifuhU4lP0Ow">https://pan.baidu.com/s/1Jk119himVJhifuhU4lP0Ow</a>   </li><li>提取码：w6o0</li></ul></li><li>ffmpeg 验证：<ul><li><code>ffmpeg –version</code><img src="https://pic2.zhimg.com/80/v2-fa3860fc6f29dffc51d5a98bd8546bb5_1440w.webp" alt="|L|475"></li></ul></li></ul><h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3><h4 id="视频切割"><a href="#视频切割" class="headerlink" title="视频切割"></a>视频切割</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ss 00:00:05 -t 00:00:04 -i C:\Users\mmmm2sdsd1\Desktop\105_Flashing_Frying_six_dragon_05.ts -vcodec copy -acodec copy output.ts  </span><br></pre></td></tr></table></figure><pre><code>- 00:00:05  ：起始时间点。  - 00:00:04  ：切割视频总时长。 </code></pre><h4 id="视频转图像（vidoe-2-BMP）："><a href="#视频转图像（vidoe-2-BMP）：" class="headerlink" title="视频转图像（vidoe 2 BMP）："></a>视频转图像（vidoe 2 BMP）：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ss 00:00:00 -i C:\Users\jimmy_wei\Desktop\142.MOV -t 00:00:15 -s 1920x1088 -pix_fmt bgr24 -y C:\Users\jimmy_wei\Desktop\halo\142\%06d.bmp  </span><br><span class="line">ffmpeg -ss 00:00:03 -i E:\_VIDEO\435_AQUAMAN_08.mp4 -t 00:00:15 -s 3840x2160 -pix_fmt bgr24 -y E:\_BMP\3840_2160\435\%06d.bmp  </span><br></pre></td></tr></table></figure><h4 id="图像合成视频（BMP-2-video）："><a href="#图像合成视频（BMP-2-video）：" class="headerlink" title="图像合成视频（BMP 2 video）："></a>图像合成视频（BMP 2 video）：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -framerate 60 -i C:\Users\jimmy\Desktop\source_pic\%06d.bmp -r 60 -s 1920x1080 -c:v libx265 -crf 18 -pix_fmt yuv420p -y C:\Users\jimmy\Desktop\output.mp4  </span><br></pre></td></tr></table></figure><h3 id="视频推流"><a href="#视频推流" class="headerlink" title="视频推流"></a>视频推流</h3><p><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230426164032.png" alt="20230426164032|left|500"></p><h4 id="推流视频到nginx网页"><a href="#推流视频到nginx网页" class="headerlink" title="推流视频到nginx网页"></a>推流视频到nginx网页</h4><h5 id="nginx服务器："><a href="#nginx服务器：" class="headerlink" title="nginx服务器："></a>nginx服务器：</h5><ul><li>软件地址：<code>D:\Program\nginx-1.7.11.3-Gryphon</code></li><li>启动方法：<code>nginx.exe -c conf\nginx-win-rtmp.conf</code></li></ul><h5 id="ffmpeg推流："><a href="#ffmpeg推流：" class="headerlink" title="ffmpeg推流："></a>ffmpeg推流：</h5><ul><li>指令：<code>ffmpeg -re -i F:\2_视频\电视剧\武林外传\1.郭女侠怒砸同福店，佟掌柜妙点迷路人.mkv -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/live/home</code><br><em>按Q可以退出推流。</em></li></ul><h5 id="查看推流视频："><a href="#查看推流视频：" class="headerlink" title="查看推流视频："></a>查看推流视频：</h5><ul><li>点击这个连接可以自动弹出PotPlayer播放推流视频：<a href="rtmp://localhost:1935/live/home">rtmp:&#x2F;&#x2F;localhost:1935&#x2F;live&#x2F;home</a></li></ul><h4 id="推流视频到b站"><a href="#推流视频到b站" class="headerlink" title="推流视频到b站"></a>推流视频到b站</h4><h5 id="b站服务器端设置："><a href="#b站服务器端设置：" class="headerlink" title="b站服务器端设置："></a>b站服务器端设置：</h5><ul><li><a href="https://link.bilibili.com/p/center/index#/my-room/start-live">开播设置 - 个人中心 - bilibili link</a></li><li>进入直播，点击开播设置，设置分类，房间名称，开启直播<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230426135952.png" alt="20230426135952|left|425"></li><li>生成rtmp推流地址和串流密匙。这两个会在推流中使用。<ul><li>服务器地址：%%🔐α 💡ID💡1vqREn1&#x2F;S+Z8L2gewqQOW6s1cZIOuE+HJnrtMH1bhfjvU2kIUkt1n31BEZV5Q51XTAlVmk1HG&#x2F;b0P96qcjcFGFmS+EElaSrL 🔐%%</li><li>串流密钥：%%🔐α 💡ID💡NTCvUsiKTYODuGkCPb88QCIKEMfWaSri+NoFOiyquHczADwXk4Ex73RK980fFdxyNAV+ddz27TY73NdnfJFFdvo9zOj0LDZBAwqUGsNQRr96fF6F1SkbNPw&#x2F;i4Ri9nZlbfrAdDMvEud2yqvzhlcu8gpym2SnxkL4yToj 🔐%%</li></ul></li></ul><h5 id="ffmpeg推流：-1"><a href="#ffmpeg推流：-1" class="headerlink" title="ffmpeg推流："></a>ffmpeg推流：</h5><ul><li>指令模板：<code>ffmpeg -re -stream_loop -1 -i &quot;test.mp4&quot; -c copy -f flv &quot;$&#123;rtmp&#125;&quot;</code><br><em>视频文件全路径不需要加双引号。</em><br><em>rtmp地址需要加双引号，替换<code>$&#123;rtmp&#125;</code>即可。</em></li><li>实际测试ok指令：%%🔐α 💡ID💡PK4pmoTqn46s4H&#x2F;D2oQ&#x2F;N65OryxeHqiollA6Jtzzgb8H4h1ITMrqGX+9Syr&#x2F;9CUXtTcCNzTu34+Uleo1QfgHGUZd2fxpmSEJdozTvbi4A7LfYxAiZkCREe8f1oS8z9nSqLqFbuoAjzq260KE&#x2F;j7hkB&#x2F;3AtDMY0CRcrDklOXkJ7u0i2OELTrW3ie8fBvCpMUfGHBn1IYkZTtLAKmr5EWzW888ngpZtgopijPhrO+vPVfATMtwQZBoiXadL6YjRTaVmuhzVdG6qG1Hb2Cn0KuiKOYIeDVeU78t0OKOWBaaZUIPijqyEz4BRI+2ZC62yu48+OgG1IWuzNcToGw6JVtVDfTpUd3OvAl8gzFX1wOmpAzFBJsRYwkA2+yl&#x2F;0O4NbFNnJkeUwBq6Iylb9kGEDyh&#x2F;Ww&#x3D; 🔐%%</li></ul><h5 id="查看推流视频：-1"><a href="#查看推流视频：-1" class="headerlink" title="查看推流视频："></a>查看推流视频：</h5><ul><li>打开网页即可：<a href="http://live.bilibili.com/9134075">老白涮肉坊 - laaaaaaaaa - 哔哩哔哩直播，二次元弹幕直播平台</a></li></ul><h5 id="b站推流应用价值："><a href="#b站推流应用价值：" class="headerlink" title="b站推流应用价值："></a>b站推流应用价值：</h5><h6 id="什么是无人直播？"><a href="#什么是无人直播？" class="headerlink" title="什么是无人直播？"></a>什么是无人直播？</h6><blockquote><p>无人直播是一种自动化、智能化的直播方式，其运作过程不需要人工干预或仅仅需要非常少量的人工干预。相对于传统的人工直播模式，无人直播更加智能、高效、稳定和节省人力成本。<br>具体来说，无人直播通过将摄像头、麦克风、主机、人工智能等技术设备集成在一起，实现了直播内容的自动生成、发布以及分发等功能，不需要直播员现场控制，而是通过算法和预设的规则智能化地进行直播，从而实现了自动化直播。<br>同时，无人直播还有着更高的直播覆盖率和更好的直播质量。无人直播被广泛应用于各种应用场景，如电商直播、房地产直播、景区直播、体育赛事直播等。</p></blockquote><h6 id="无人直播优势？"><a href="#无人直播优势？" class="headerlink" title="无人直播优势？"></a>无人直播优势？</h6><blockquote><p>人工智能技术、自动化技术等先进技术逐渐成熟，让我们可以更加智能地管理业务，提高工作效率。此外，无人直播可以为企业、机构、个人提供更加便捷、高效、安全的直播服务，让他们更好地宣传品牌、增加销售额、吸引更多客户。<br>无人直播还可以提高直播的稳定性和可靠性，减少人工干预导致的差错和错误，从而更好地满足用户的需求，实现商业价值。总之，无人直播是一种符合科技发展趋势、提高工作效率和商业价值的好方式。</p></blockquote><h3 id="摄像头推流"><a href="#摄像头推流" class="headerlink" title="摄像头推流"></a>摄像头推流</h3><h4 id="nginx服务器：-1"><a href="#nginx服务器：-1" class="headerlink" title="nginx服务器："></a>nginx服务器：</h4><ul><li>软件地址：<code>D:\Program\nginx-1.7.11.3-Gryphon</code></li><li>启动方法：<code>nginx.exe -c conf\nginx-win-rtmp.conf</code></li></ul><h4 id="python-OpenCV-ffmpeg推流"><a href="#python-OpenCV-ffmpeg推流" class="headerlink" title="python OpenCV + ffmpeg推流"></a>python OpenCV + ffmpeg推流</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> sp  </span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv  </span><br><span class="line"><span class="keyword">import</span> subprocess  </span><br><span class="line"><span class="comment">### 参考教程：https://zhuanlan.zhihu.com/p/74260950  </span></span><br><span class="line"><span class="comment">### 后期如果要提升响应速度，减少延迟，可以参考下面这篇文章：  </span></span><br><span class="line"><span class="comment">###     https://zhuanlan.zhihu.com/p/38136322  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rtmpUrl = <span class="string">&quot;rtmp://localhost:1935/live/home&quot;</span>  </span><br><span class="line">camera_path = <span class="number">0</span>  </span><br><span class="line">cap = cv.VideoCapture(camera_path)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Get video information  </span></span><br><span class="line">fps = <span class="built_in">int</span>(cap.get(cv.CAP_PROP_FPS))  </span><br><span class="line">width = <span class="built_in">int</span>(cap.get(cv.CAP_PROP_FRAME_WIDTH))  </span><br><span class="line">height = <span class="built_in">int</span>(cap.get(cv.CAP_PROP_FRAME_HEIGHT))  </span><br><span class="line"></span><br><span class="line"><span class="comment"># ffmpeg command  </span></span><br><span class="line">command = [<span class="string">&#x27;ffmpeg&#x27;</span>,  </span><br><span class="line">        <span class="string">&#x27;-y&#x27;</span>,  </span><br><span class="line">        <span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;rawvideo&#x27;</span>,  </span><br><span class="line">        <span class="string">&#x27;-vcodec&#x27;</span>,<span class="string">&#x27;rawvideo&#x27;</span>,  </span><br><span class="line">        <span class="string">&#x27;-pix_fmt&#x27;</span>, <span class="string">&#x27;bgr24&#x27;</span>,  </span><br><span class="line">        <span class="string">&#x27;-s&#x27;</span>, <span class="string">&quot;&#123;&#125;x&#123;&#125;&quot;</span>.<span class="built_in">format</span>(width, height),  </span><br><span class="line">        <span class="string">&#x27;-r&#x27;</span>, <span class="built_in">str</span>(fps),  </span><br><span class="line">        <span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;-&#x27;</span>,  </span><br><span class="line">        <span class="string">&#x27;-c:v&#x27;</span>, <span class="string">&#x27;libx264&#x27;</span>,  </span><br><span class="line">        <span class="string">&#x27;-pix_fmt&#x27;</span>, <span class="string">&#x27;yuv420p&#x27;</span>,  </span><br><span class="line">        <span class="string">&#x27;-preset&#x27;</span>, <span class="string">&#x27;ultrafast&#x27;</span>,  </span><br><span class="line">        <span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;flv&#x27;</span>,  </span><br><span class="line">        rtmpUrl]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 管道配置  </span></span><br><span class="line">p = sp.Popen(command, stdin=sp.PIPE)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># read webcamera  </span></span><br><span class="line"><span class="keyword">while</span>(cap.isOpened()):  </span><br><span class="line">    ret, frame = cap.read()  </span><br><span class="line">    <span class="comment"># frame_queue.put(frame)  </span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Opening camera is failed&quot;</span>)  </span><br><span class="line">        <span class="keyword">break</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># process frame  </span></span><br><span class="line">    <span class="comment"># your code  </span></span><br><span class="line">    <span class="comment"># process frame  </span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># write to pipe  </span></span><br><span class="line">    <span class="comment"># if frame_queue.empty() != True:  </span></span><br><span class="line">    <span class="comment">#     frame_new = frame_queue.get()  </span></span><br><span class="line">    p.stdin.write(frame.tostring())  </span><br></pre></td></tr></table></figure><h3 id="ffmpeg-参数详解"><a href="#ffmpeg-参数详解" class="headerlink" title="ffmpeg 参数详解"></a>ffmpeg 参数详解</h3><p>基本使用方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg [[options][`-i&#x27; input_file]] &#123;[options] output_file&#125;</span><br></pre></td></tr></table></figure><p>参数含义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">a) 通用选项</span><br><span class="line">-L license</span><br><span class="line">-h 帮助</span><br><span class="line">-fromats 显示可用的格式，编解码的，协议的。。。</span><br><span class="line">-f fmt 强迫采用格式fmt</span><br><span class="line">-i filename 输入文件</span><br><span class="line">-y 覆盖输出文件（即如果test.***文件已经存在的话，不经提示就覆盖掉了）</span><br><span class="line">-t duration 设置纪录时间 hh:mm:ss[.xxx]格式的记录时间也支持</span><br><span class="line">-ss position 搜索到指定的时间 [-]hh:mm:ss[.xxx]的格式也支持。使用-ss参数的作用，可以从指定时间点开始转换任务，-ss后的时间单位为秒</span><br><span class="line">-title string 设置标题（比如PSP中显示影片的标题）</span><br><span class="line">-author string 设置作者</span><br><span class="line">-copyright string 设置版权</span><br><span class="line">-comment string 设置评论</span><br><span class="line">-target type 设置目标文件类型(vcd,svcd,dvd) 所有的格式选项（比特率，编解码以及缓冲区大小）自动设置 ，只需要输入如下的就可以了：ffmpeg -i myfile.avi -target vcd vcd.mpg</span><br><span class="line">-hq 激活高质量设置</span><br><span class="line">-itsoffset offset 设置以秒为基准的时间偏移，该选项影响所有后面的输入文件。该偏移被加到输入文件的时戳，定义一个正偏移意味着相应的流被延迟了 offset秒。 [-]hh:mm:ss[.xxx]的格式也支持。</span><br><span class="line">b) 视频选项</span><br><span class="line">-b bitrate 设置比特率，缺省200kb/s</span><br><span class="line">-vb bitrate set bitrate (in bits/s)</span><br><span class="line">-vframes number 设置要编码多少帧</span><br><span class="line">-r fps 设置帧频 缺省25</span><br><span class="line">-s size 设置帧大小 格式为W*H 缺省160X128.也可以直接使用简写，也认：Sqcif qcif cif 4cif 等</span><br><span class="line">-aspect aspect 设置横纵比 4:3 16:9 或 1.3333 1.7777</span><br><span class="line">-croptop size 设置顶部切除带大小 像素单位</span><br><span class="line">-cropbottom size -cropleft size -cropright size</span><br><span class="line">-padtop size 设置顶部补齐的大小 像素单位</span><br><span class="line">-padbottom size -padleft size -padright size -padcolor color 设置补齐条颜色(hex,6个16进制的数，红:绿:兰排列，比如 000000代表黑色)</span><br><span class="line">-vn 不做视频记录</span><br><span class="line">-bt tolerance 设置视频码率容忍度kbit/s （固定误差）</span><br><span class="line">-maxrate bitrate设置最大视频码率容忍度 （可变误差）</span><br><span class="line">-minrate bitreate 设置最小视频码率容忍度（可变误差）</span><br><span class="line">-bufsize size 设置码率控制缓冲区大小</span><br><span class="line">-vcodec codec 强制使用codec编解码方式，如-vcodec xvid 使用xvid压缩 如果用copy表示原始编解码数据必须被拷贝。</span><br><span class="line">-sameq 使用同样视频质量作为源（VBR）</span><br><span class="line">-pass n 选择处理遍数（1或者2）。两遍编码非常有用。第一遍生成统计信息，第二遍生成精确的请求的码率</span><br><span class="line">-passlogfile file 选择两遍的纪录文件名为file</span><br><span class="line">c)高级视频选项</span><br><span class="line">-g gop_size 设置图像组大小 这里设置GOP大小，也表示两个I帧之间的间隔</span><br><span class="line">-intra 仅适用帧内编码</span><br><span class="line">-qscale q 使用固定的视频量化标度(VBR) 以&lt;q&gt;质量为基础的VBR，取值0.01-255，约小质量越好，即qscale 4和-qscale 6，4的质量比6高 。此参数使用次数较多，实际使用时发现，qscale是种固定量化因子，设置qscale之后，前面设置的-b好像就无效了，而是自动调整了比特率。</span><br><span class="line">-qmin q 最小视频量化标度(VBR) 设定最小质量，与-qmax（设定最大质量）共用</span><br><span class="line">-qmax q 最大视频量化标度(VBR) 使用了该参数，就可以不使用qscale参数</span><br><span class="line">-qdiff q 量化标度间最大偏差 (VBR)</span><br><span class="line">-qblur blur 视频量化标度柔化(VBR)</span><br><span class="line">-qcomp compression 视频量化标度压缩(VBR)</span><br><span class="line">-rc_init_cplx complexity 一遍编码的初始复杂度</span><br><span class="line">-b_qfactor factor 在p和b帧间的qp因子</span><br><span class="line">-i_qfactor factor 在p和i帧间的qp因子</span><br><span class="line">-b_qoffset offset 在p和b帧间的qp偏差</span><br><span class="line">-i_qoffset offset 在p和i帧间的qp偏差</span><br><span class="line">-rc_eq equation 设置码率控制方程 默认tex^qComp</span><br><span class="line">-rc_override override 特定间隔下的速率控制重载</span><br><span class="line">-me method 设置运动估计的方法 可用方法有 zero phods log x1 epzs(缺省) full</span><br><span class="line">-dct_algo algo 设置dct的算法 可用：</span><br><span class="line">0 FF_DCT_AUTO 缺省的DCT</span><br><span class="line">1 FF_DCT_FASTINT</span><br><span class="line">2 FF_DCT_INT</span><br><span class="line">3 FF_DCT_MMX</span><br><span class="line">4 FF_DCT_MLIB</span><br><span class="line">5 FF_DCT_ALTIVEC</span><br><span class="line">-idct_algo algo 设置idct算法。可用的有：</span><br><span class="line">0 FF_IDCT_AUTO 缺省的IDCT</span><br><span class="line">1 FF_IDCT_INT</span><br><span class="line">2 FF_IDCT_SIMPLE</span><br><span class="line">3 FF_IDCT_SIMPLEMMX</span><br><span class="line">4 FF_IDCT_LIBMPEG2MMX</span><br><span class="line">5 FF_IDCT_PS2</span><br><span class="line">6 FF_IDCT_MLIB</span><br><span class="line">7 FF_IDCT_ARM</span><br><span class="line">8 FF_IDCT_ALTIVEC</span><br><span class="line">9 FF_IDCT_SH4</span><br><span class="line">10 FF_IDCT_SIMPLEARM</span><br><span class="line">-er n 设置错误残留为n</span><br><span class="line">1 FF_ER_CAREFULL 缺省</span><br><span class="line">2 FF_ER_COMPLIANT</span><br><span class="line">3 FF_ER_AGGRESSIVE</span><br><span class="line">4 FF_ER_VERY_AGGRESSIVE</span><br><span class="line">-ec bit_mask 设置错误掩蔽为bit_mask,该值为如下值的位掩码 1 FF_EC_GUESS_MVS (default=enabled) 2 FF_EC_DEBLOCK (default=enabled)</span><br><span class="line">-bf frames 使用frames个B 帧，支持mpeg1,mpeg2,mpeg4（即如果-bf 2的话，在两个非b帧中间隔的b帧数目为2，即IBBPBBPBBP结构）</span><br><span class="line">-mbd mode 宏块决策</span><br><span class="line">0 FF_MB_DECISION_SIMPLE 使用mb_cmp</span><br><span class="line">1 FF_MB_DECISION_BITS 2 FF_MB_DECISION_RD</span><br><span class="line">-4mv 使用4个运动矢量 仅用于mpeg4</span><br><span class="line">-part 使用数据划分 仅用于mpeg4</span><br><span class="line">-bug param 绕过没有被自动监测到编码器的问题</span><br><span class="line">-strict strictness 跟标准的严格性</span><br><span class="line">-aic 使能高级帧内编码 h263+</span><br><span class="line">-umv 使能无限运动矢量 h263+</span><br><span class="line">-deinterlace 不采用交织方法</span><br><span class="line">-interlace 强迫交织法编码 仅对mpeg2和mpeg4有效。当你的输入是交织的并且你想要保持交织以最小图像损失的时候采用该选项。可选的方法是不交织，但是损失更大</span><br><span class="line">-psnr 计算压缩帧的psnr</span><br><span class="line">-vstats 输出视频编码统计到vstats_hhmmss.log</span><br><span class="line">-vhook module 插入视频处理模块 module 包括了模块名和参数，用空格分开</span><br><span class="line">-bitexact 使用标准比特率</span><br><span class="line">-max_qdiff 视频中所有桢（包括i/b/P）的最大Q值差距</span><br><span class="line">-b_qfactor 表示i/p与B的Q值比例因子,值越大B桢劣化越严重</span><br><span class="line">-b_qoffset 表示1/p与B的Q值比例的偏移量,值越大B桢劣化越严重.如果大于0,那么下一个B的Q=前一个P的Q乘以b_quant_factor再加上offset,如果小于0,则B的Q=负的normal_Q乘以factor加上offset.</span><br><span class="line">-i_qfactor p和i的Q值比例因子,越接近1则P越优化.</span><br><span class="line">-i_qoffset p和i的Q的偏移量</span><br><span class="line">D)音频选项%%%%</span><br><span class="line">-ab bitrate 设置音频码率</span><br><span class="line">-ar freq 设置音频采样率</span><br><span class="line">-ac channels 设置通道 缺省为1，即单通道</span><br><span class="line">-an 不使能音频纪录</span><br><span class="line">-acodec codec 使用codec编解码 如：-acodec AAC 使用AAC音频编码</span><br></pre></td></tr></table></figure><p>对了，如果大家对AI、新技术、软件评测感兴趣，可以关注我的微信公众号：<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20220901100734.png" alt="image-20220328170047757|left" style="zoom: 12.5%;" />或者个人博客：<a href="https://weicun.gitee.io/">https://weicun.gitee.io/</a>  <a href="https://weicun.gitee.io/">蓝色单车</a></p><hr><h3 id="🌈参考："><a href="#🌈参考：" class="headerlink" title="🌈参考："></a>🌈参考：</h3><ol><li><a href="https://juejin.cn/post/7215842530838085692">睡后收入（无人直播） - 掘金</a></li><li>FFmpeg的官方网址是 <a href="http://ffmpeg.mplayerhq.hu/">http://ffmpeg.mplayerhq.hu/</a> </li><li>中文Wiki是 <a href="http://www.ffmpeg.com.cn/">http://www.ffmpeg.com.cn/</a> </li><li><a href="https://zhuanlan.zhihu.com/p/118362010">Windows下安装使用ffmpeg - 知乎</a></li><li><a href="../%E3%80%90===1-%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB===%E3%80%91/0-%E6%8A%80%E6%9C%AF/1-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83&%E5%B7%A5%E5%85%B7/3-API&%E5%B0%8F%E6%8A%80%E5%B7%A7/Ffmpeg%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.md">Ffmpeg使用技巧</a></li><li><a href="../../../../%E3%80%90===2-%E9%A1%B9%E7%9B%AE===%E3%80%91/009-%E8%A7%86%E5%B1%8F%E7%9B%91%E6%8E%A7/%E5%AE%B6%E5%BA%AD%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F.md">家庭视频监控系统</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🌈&lt;strong&gt;Description&lt;/strong&gt;：&lt;br&gt;​	本文主要介绍ffmpeg的各种用法，纯纯干货，请慢慢咀嚼，管饱。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="每日文章" scheme="https://weicun581.github.io/tags/%E6%AF%8F%E6%97%A5%E6%96%87%E7%AB%A0/"/>
    
    <category term="ffmpeg" scheme="https://weicun581.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>AgentGPT-带互联网搜索功能的chatGPT</title>
    <link href="https://weicun581.github.io/2023/04/25/20%20AgentGPT-%E5%B8%A6%E4%BA%92%E8%81%94%E7%BD%91%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E7%9A%84chatGPT/"/>
    <id>https://weicun581.github.io/2023/04/25/20%20AgentGPT-%E5%B8%A6%E4%BA%92%E8%81%94%E7%BD%91%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E7%9A%84chatGPT/</id>
    <published>2023-04-25T06:35:00.000Z</published>
    <updated>2023-06-01T08:39:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🌈<strong>Description</strong>：<br>​Agent GPT 主要的AI 功能就是建立在原版的AutoGPT 之上，然后再加上图形介面，这样阅读起来比较容易也比较方便。<br>相较于ChatGPT，它具有：互联网搜索查询功能、任务拆解各个执行然后串联能力。<br>它能够根据用户需求，在用户完全不插手的情况下自主执行任务，包括日常的事件分析、营销方案撰写、代码编程、数学运算等事务都能代劳。<br>这里我会按照AgentGPT 官方所建议的步骤，一步一步教搭建安装并体验AgentGPT。</p></blockquote><span id="more"></span><p><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230425145426.png" alt="20230425145426|left|475"></p><h3 id="如何安装Agent-GPT"><a href="#如何安装Agent-GPT" class="headerlink" title="如何安装Agent GPT"></a>如何安装Agent GPT</h3><ul><li>平台：win10 docker desktop </li><li>安装方法：<ol><li>在github上下载<a href="https://github.com/reworkd/AgentGPT">AgentGPT项目</a>：<code>git clone  git@github.com:reworkd/AgentGPT.git</code></li><li>按照官网推荐的docker安装方式：<code>./setup.sh --docker</code>，当然你也可以在本地安装，不过介于docker安装方式最简单，所以这边就不再本地环境搭建了，有兴趣可以在github agentGPT官网上查询。<a href="https://github.com/reworkd/AgentGPT">GitHub - reworkd&#x2F;AgentGPT: 🤖 Assemble, configure, and deploy autonomous AI Agents in your browser.</a><br><em>这里有个小的知识点，如何在win10上运行.sh脚本文件？答案是：用git bash</em></li><li>用setup脚本安装完成之后，可以用<code>docker ps -a</code>确认下container是否真的安装好并启动：<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230425144818.png" alt="20230425144818|left|525">可以看到agentgpt已经成功创建成功，并在3000端口运行了。</li><li>访问agentGPT container的web：<a href="http://localhost:3000/">http://localhost:3000/</a>，出现这个界面就表示安装成功了：<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230425145027.png" alt="20230425145027|left|475"></li><li>接下来我们设置下AI驱动，点击settings，选择gpt-3.5-turbo，输入你的gpt3.5 kye（这个需要你之前注册好，注册的硬性要求有两个：1. 需要会魔法。 2.需要有国外手机号，用于接收验证码，这类网站有很多，请自行百度）<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230425145325.png" alt="20230425145325|left|475"></li></ol></li></ul><h3 id="AgentGPT使用体验"><a href="#AgentGPT使用体验" class="headerlink" title="AgentGPT使用体验"></a>AgentGPT使用体验</h3><h4 id="询问系统时间"><a href="#询问系统时间" class="headerlink" title="询问系统时间"></a>询问系统时间</h4><p>这个实验尝试了文agentGPT现在时间是几点？<br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230425145750.png" alt="20230425145750|left|500"><br>在这里可以看到他的分析思路是：</p><ul><li>使用系统时钟获取当前时间</li><li>将当前时间转换为字符串格式</li><li>返回字符串时间作为响应</li><li>将字符串时间转换为数字时间</li><li>返回数字时间作为响应<br>思路是对的，想法也很好，但是在执行第一步骤的时候就失败了：<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230425150017.png" alt="20230425150017|left|500">之后就是不停的循环这几个步骤，陷入了死循环。</li></ul><h4 id="统计淘宝网上销量前6的血压仪价格及名称"><a href="#统计淘宝网上销量前6的血压仪价格及名称" class="headerlink" title="统计淘宝网上销量前6的血压仪价格及名称"></a>统计淘宝网上销量前6的血压仪价格及名称</h4><p><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230425150456.png" alt="20230425150456|left|675"><br>结果：我很满意，的确是有访问互联网并统计到。<br>但是，我不满意的是它的任务拆解执行能力，我的确是从它的子任务重得到了答案，但是它把任务拆分的方式有问题，还是会陷入死循环。<br>因此，如何跳出死循环，这个是AgentGPT需要加强的地方。当然这也是最难的地方。</p><p>随后我让它用中文回复我，可以看到它的确是有统计到结果，但是一旦遇到某一步骤无法得到结果，它就会不停的陷入死循环：<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230425150901.png" alt="20230425150901|left|500"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>AgetGPT的确是给人眼前一亮的感觉，相较于chatGPT它的互联网搜索能力、任务拆解执行能力，的确是很经验。<br>但是，如何跳出死循环这部分还是需要继续努力。不过介于目前的版本还是beta版本，所以我觉得已经很棒了，加油，希望可以给我们带来更好的产品。</p><p>对了，如果大家对AI、新技术、软件评测感兴趣，可以关注我的微信公众号：<img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20220901100734.png" alt="image-20220328170047757|left" style="zoom: 12.5%;" />或者个人博客：<a href="https://weicun.gitee.io/">https://weicun.gitee.io/</a>  <a href="https://weicun.gitee.io/">蓝色单车</a></p><hr><h3 id="🌈参考："><a href="#🌈参考：" class="headerlink" title="🌈参考："></a>🌈参考：</h3><p>1.<br>2.<br>3. </p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🌈&lt;strong&gt;Description&lt;/strong&gt;：&lt;br&gt;​	Agent GPT 主要的AI 功能就是建立在原版的AutoGPT 之上，然后再加上图形介面，这样阅读起来比较容易也比较方便。&lt;br&gt;相较于ChatGPT，它具有：互联网搜索查询功能、任务拆解各个执行然后串联能力。&lt;br&gt;它能够根据用户需求，在用户完全不插手的情况下自主执行任务，包括日常的事件分析、营销方案撰写、代码编程、数学运算等事务都能代劳。&lt;br&gt;这里我会按照AgentGPT 官方所建议的步骤，一步一步教搭建安装并体验AgentGPT。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>组件世界-初体验</title>
    <link href="https://weicun581.github.io/2023/04/23/25%20obsidian%E4%BD%93%E9%AA%8C%E7%BB%84%E4%BB%B6%E4%B8%96%E7%95%8C/"/>
    <id>https://weicun581.github.io/2023/04/23/25%20obsidian%E4%BD%93%E9%AA%8C%E7%BB%84%E4%BB%B6%E4%B8%96%E7%95%8C/</id>
    <published>2023-04-23T05:23:00.000Z</published>
    <updated>2023-04-23T06:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🌈<strong>Description</strong>：<br>​逛网站的时候看到的组件库，感觉很漂亮，记录并实验看下效果。<br>    我用的是 obsidian，所以本文是基于 obsidian 来实验组件世界的效果。</p></blockquote><span id="more"></span><h3 id="组件世界-介绍"><a href="#组件世界-介绍" class="headerlink" title="组件世界-介绍"></a>组件世界-介绍</h3><p>一个服务于 <strong>Notion 类</strong>产品、<strong>双链笔记类</strong>产品、<strong>代码托管平台</strong>「GitHub 等」、<strong>博客系统</strong>「WordPress」以及为知笔记等文本编辑器的可嵌入式小组件库。<br>一个辅助用户建立个性化、可视化的<strong>仪表盘</strong>或者<strong>知识库</strong>的工具。<br><strong>官网地址</strong>：<a href="https://cn.widgetstore.net/#/lib/basic">组件世界&#x2F;WidgetStore - 丰富的嵌入式小组件库、动态图标库、可视化图表库</a></p><h3 id="组件世界-功能"><a href="#组件世界-功能" class="headerlink" title="组件世界-功能"></a>组件世界-功能</h3><p>目前，「组件世界&#x2F;WidgetStore」提供<strong>基础组件、动态图标、动态背景、可视化图表、Notion 汉化、效率时代「博客」</strong>。</p><h3 id="组件世界-支持的平台"><a href="#组件世界-支持的平台" class="headerlink" title="组件世界-支持的平台"></a>组件世界-支持的平台</h3><p><strong>Notion 类笔记软件</strong>：包括 Notion、FlowUs 息流笔记 <a href="https://www.zhihu.com/people/8b64b81de4123ec48f2f75c1b254929c">@FlowUs</a>、Wolai 我来云笔记、ClickUp、Coda、Anytype. 以及将来支持网页嵌入的印象笔记 Verse、微软 Microsoft Loop、妙记多 <a href="https://www.zhihu.com/people/38a9626ec5cde25f8653f9dd082da795">@妙记多Mojidoc</a> ……<br><strong>双链笔记软件</strong>，比如 Roam Research、Obsidian 黑曜石、Logseq、RemNote、思源笔记、Roam Edit、HuluNote 葫芦笔记。<br><strong>其他编辑器</strong>：为知笔记 WizNote<br><strong>代码托管平台</strong>：Github、Gitee、Gitlab<br><strong>博客平台</strong>：Wordpress<br><img src="https://pic4.zhimg.com/80/v2-5395c20620c0ae38d30839b233c44c67_1440w.webp" alt="|475"></p><h3 id="组件世界-特点"><a href="#组件世界-特点" class="headerlink" title="组件世界-特点"></a>组件世界-特点</h3><p><strong>小组件类型丰富</strong>。目前，「组件世界&#x2F;WidgetStore」提供了包括 <strong>基础组件、动态图标、动态背景、可视化图表、Notion 汉化</strong> 等多种服务，可以为笔记用户<strong>提供适用于时间管理、任务管理、资讯管理、习惯养成、学习等多种使用场景的解决方案</strong>。比如，在基础组件中包括天气、时钟、番茄钟、倒计时、日历、纪念日、习惯打卡、访客统计、白噪音、热力图、微博热搜、百度统计埋点等多种类型等小组件。<br><strong>小组件服务稳定</strong>。相比国外同类产品，服务稳定，使用十分方便。<br><strong>小组件支持个性化定制</strong>。小组件支持文字字体、颜色、数字等基础信息的组件设置。与此同时，小组件也支持小组件外观背景等公共配置。<br><strong>小组件平台化</strong>。目前，「组件世界&#x2F;WidgetStore」正在快速迭代中。并且，「组件世界&#x2F;WidgetStore」支持第三方开发者参与开发小组件，共建社区生态。</p><h3 id="实际使用体验"><a href="#实际使用体验" class="headerlink" title="实际使用体验"></a>实际使用体验</h3><h4 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h4><p>官网: <a href="https://cn.widgetstore.net/#/lib/basic">组件世界&#x2F;WidgetStore - 丰富的嵌入式小组件库、动态图标库、可视化图表库</a><br>微信登陆。免费版 and 付费版的差异：<br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230423133519.png" alt="20230423133519|left|775"></p><p>免费版用于体验体验还是不错的。39.9 元&#x2F;年那个套餐看起来还不错的，有需要的可以试试。</p><h4 id="天气预报"><a href="#天气预报" class="headerlink" title="天气预报"></a>天气预报</h4><p>创建该组件，获取 url 地址：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cn.widgetstore.net/view/index.html?q=5a69cbba6343e96e008b8d577a5b4815.0122a5876444c41d099d8ced1592d84f</span><br></pre></td></tr></table></figure><p>替换下面的 url 地址：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span>  <span class="attr">src</span>=<span class="string">&quot;https://cn.widgetstore.net/view/index.html?q=b47ffc57625d6ba5004fa62311af799f.a145a9ee6444a6c200037f1662fa074d&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际效果：</p><iframe  src="https://cn.widgetstore.net/view/index.html?q=5a69cbba6343e96e008b8d577a5b4815.0122a5876444c41d099d8ced1592d84f" frameborder="0" width="400" height="300" ></iframe><h4 id="节假日倒计时"><a href="#节假日倒计时" class="headerlink" title="节假日倒计时"></a>节假日倒计时</h4><p>配置同上，实际效果：</p><iframe  src="https://cn.widgetstore.net/view/index.html?q=b47ffc57625d6ba5004fa62311af799f.a145a9ee6444a6c200037f1662fa074d" frameborder="0" width="300" height="300" ></iframe>#### 动态日历<iframe  src="https://swg.notion.pet/s/1923d7786444c5b90003a5f02b42821d" frameborder="0" width="100" height="100" ></iframe><h4 id="卡片胶囊倒计时"><a href="#卡片胶囊倒计时" class="headerlink" title="卡片胶囊倒计时"></a>卡片胶囊倒计时</h4><iframe  src="https://swg.notion.pet/s/bg-873d64f46444c657000518ee33dd78b0" frameborder="0" width="500" height="300" ></iframe>#### 图表类型折线图、饼状图、柱状图等需要 notion 数据库，目前用 obsidian，所以这部分无法尝试。<h3 id="实际使用感受"><a href="#实际使用感受" class="headerlink" title="实际使用感受"></a>实际使用感受</h3><p>obsidian 使用组件世界基本玩的差不多了，总体感觉：眼睛一亮，后续仍然需要加强。<br>如果说到建议的话：</p><ul><li>免费账户政策 bug： <ul><li>免费账户只可以使用 2 个小组件，这个里面其实是有个政策 bug 的。因为任意一个账号创建的小组件，都可以免费的给任何用。（例如上文中的天气组件，你们都可以随便用）那么，如果我有几个小伙伴，每个人都注册一个这样的账号，然后创建各不相同的组件，然后共享。这样分分钟钟就可以用遍所有小组件。 </li><li>当然我没有这样做，这样做挺没意思的。我们还是要支持正版软件的良性循环。</li></ul></li><li>图表类型组件数据库支持类型太少了：<ul><li>正如官网上所说，目前只支持 notion，这个对 obsidian 不太友好。</li></ul></li><li>网上免费的资源有许多可以实现同等效果：<ul><li>例如：<a href="https://tianqiapi.com/api.php?style=tw&skin=pitaya">苏州天气预报 - TianqiAPI.com</a> 也可以实现同等的效果，所以用户依赖性不是很强。<div><iframe scrolling="no" src="https://tianqiapi.com/api.php?style=tw&skin=pitaya" frameborder="0" width="500" height="500" allowtransparency="true"></iframe></div>好了，今天就到这里了，有什么想法欢迎给我留言。thanks❤</li></ul></li></ul><hr><h3 id="🌈参考："><a href="#🌈参考：" class="headerlink" title="🌈参考："></a>🌈参考：</h3><ol><li><a href="https://zhuanlan.zhihu.com/p/582745338">「组件世界&#x2F;WidgetStore」 ：一个丰富、强大的嵌入式小组件库 - 知乎</a></li><li></li><li></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🌈&lt;strong&gt;Description&lt;/strong&gt;：&lt;br&gt;​	逛网站的时候看到的组件库，感觉很漂亮，记录并实验看下效果。&lt;br&gt;    我用的是 obsidian，所以本文是基于 obsidian 来实验组件世界的效果。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo 部署填写 github 用户名和密码一次性解决方案</title>
    <link href="https://weicun581.github.io/2023/04/20/24%20hexo%E9%83%A8%E7%BD%B2%E5%A1%AB%E5%86%99github%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E4%B8%80%E6%AC%A1%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://weicun581.github.io/2023/04/20/24%20hexo%E9%83%A8%E7%BD%B2%E5%A1%AB%E5%86%99github%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E4%B8%80%E6%AC%A1%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2023-04-20T11:37:00.000Z</published>
    <updated>2023-04-20T07:31:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🌈<strong>Description</strong>：<br>​hexo 部署文章时候，会弹出 github 弹窗填写 username 和 password，填完之后还是无法上传，本文会给出解决方法。</p></blockquote><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>hexo 博客半年没写了，今天尝试更新，发现 <code>hexo d</code> 之后需要输入 github 的用户名和密码，但是我输入之后没有效果，还是无法推送到 github 上。<br>研究之后发现 rootcause 是：github 已经无法再用密码登陆推送，只能用 token，我的 token 之前只设置了 3 个月的有效期，所以现在失效了。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h4 id="1-重新生成新的-token"><a href="#1-重新生成新的-token" class="headerlink" title="1. 重新生成新的 token"></a>1. 重新生成新的 token</h4><p>新的 token 设置网址：<a href="https://github.com/settings/tokens">Personal Access Tokens (Classic) (github.com)</a><br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230420101025.png" alt="20230420101025|left"><br>新的 token （%%🔐α 💡ID💡MDO&#x2F;W 4 Cm 9 AJ 4 Ls 8&#x2F;i+yXXM 5 GzNzTJ 0 o 2 u 4 AwfZGVs 5 EqWEESkIf 0+kWt+quYVANDGUCe 4 GJWAxLJnr 7 vIgsi 7 QtSUNma 9 MPz 🔐%%）记得保存好，网页刷新之后就再也看不见了。</p><h4 id="2-配置-hexo-config-yml"><a href="#2-配置-hexo-config-yml" class="headerlink" title="2. 配置 hexo config.yml"></a>2. 配置 hexo config.yml</h4><p>配置 hexo config.yml：<br>原本的配置：<code>repo: https://github.com/weicun581/weicun581.git</code><br>新的配置：<code>repo: https://your token here@github.com/weicun581/weicun581.git</code><br>替换 <code>your token here</code> 替换成上一步的 token 就好了。</p><h2 id="实际使用效果"><a href="#实际使用效果" class="headerlink" title="实际使用效果"></a>实际使用效果</h2><p>在 hexo 根目录下执行：<code>hexo d</code>，之后在 github project 的 action 界面就可以看到 action 动作了：<br><img src="https://hello-jimmy.oss-cn-beijing.aliyuncs.com/20230420101947.png" alt="20230420101947|left"></p><hr><h3 id="🌈参考："><a href="#🌈参考：" class="headerlink" title="🌈参考："></a>🌈参考：</h3><ol><li><a href="https://blog.csdn.net/qq_43340547/article/details/119895671">(75条消息) 命令行输入hexo d后发现不能输入GitHub密码登录_SoberGit的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/weixin_41010198/article/details/119698015?utm_source=app&app_version=4.12.0&code=app_1562916241&uLinkId=usr1mkqgl919blen">(75条消息) github开发人员在七夕搞事情：remote: Support for password authentication was removed on August 13, 2021._点亮～黑夜的博客-CSDN博客</a></li></ol><p>个人博客地址：<a href="https://weicun.gitee.io/">蓝色单车 (gitee.io)</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🌈&lt;strong&gt;Description&lt;/strong&gt;：&lt;br&gt;​	hexo 部署文章时候，会弹出 github 弹窗填写 username 和 password，填完之后还是无法上传，本文会给出解决方法。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="https://weicun581.github.io/tags/hexo/"/>
    
    <category term="每日文章" scheme="https://weicun581.github.io/tags/%E6%AF%8F%E6%97%A5%E6%96%87%E7%AB%A0/"/>
    
    <category term="github" scheme="https://weicun581.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>python多进程</title>
    <link href="https://weicun581.github.io/2022/10/27/08%20Python%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>https://weicun581.github.io/2022/10/27/08%20Python%E5%A4%9A%E8%BF%9B%E7%A8%8B/</id>
    <published>2022-10-27T10:51:33.000Z</published>
    <updated>2023-04-20T02:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>​大家看过前面文章的应该都知道python中的GIL的存在，也就是多线程的时候，同一时间只能有一个线程在CPU上运行，而且是单个CPU上运行，不管你的CPU有多少核数。如果想要充分地使用多核CPU的资源，在python中大部分情况需要使用多进程。</p></blockquote><h2 id="多进程介绍"><a href="#多进程介绍" class="headerlink" title="多进程介绍"></a>多进程介绍</h2><ul><li>进程：一个程序运行起来后，代码+用到的资源 称为进程。他是操作系统分配资源的基本单元。线程完成的多任务，进程也可以。</li><li>现在的电脑的CPU一般都有多个核心，在Python中可以使用 multiprocessing 包比较方便地实现将计算任务分配给多个核心，使之并行地计算以实现加速的效果。</li><li>进程是表示资源分配的基本单位，又是调度运行的基本单位。例如，用户运行自己的程序，系统就创建一个进程，并为它分配资源，包括各种表格、<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>空间、磁盘空间、I&#x2F;O设备等。所以，进程是系统中的并发执行的单位。</li></ul><span id="more"></span><h2 id="多进程用法"><a href="#多进程用法" class="headerlink" title="多进程用法"></a>多进程用法</h2><h3 id="多进程实现方法"><a href="#多进程实现方法" class="headerlink" title="多进程实现方法"></a>多进程实现方法</h3><ul><li>Python中的多进程是通过multiprocessing包来实现的。</li><li>利用multiprocessing.Process对象来创建一个进程对象。</li><li>构造方法：<code>Process([group [, target [, name [, args [, kwargs]]]]])</code><ul><li>group: 线程组 </li><li>target: 要执行的方法</li><li>name: 进程名</li><li>args&#x2F;kwargs: 要传入方法的参数</li></ul></li><li>实例方法：<ul><li>start() ：进程准备就绪，等待CPU调度。</li><li>run()：strat()调用run方法，如果实例进程时未制定传入target，这star执行t默认run()方法。</li><li>join([timeout])：阻塞当前上下文环境的进程程，直到调用此方法的进程终止或到达指定的timeout（可选参数）。</li><li>is_alive()：返回进程是否在运行,bool类型。</li><li>terminate()：不管任务是否完成，立即停止工作进程</li></ul></li><li>属性：<ul><li>name：进程名字</li><li>pid：进程号</li></ul></li></ul><h4 id="1-常见多进程用法"><a href="#1-常见多进程用法" class="headerlink" title="1. 常见多进程用法"></a>1. 常见多进程用法</h4><ul><li><p>最简单的多进程方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span>  Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试%s多进程&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    process_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment">#开启5个子进程执行fun1函数</span></span><br><span class="line">        p = Process(target=fun1,args=(<span class="string">&#x27;Python&#x27;</span>,)) <span class="comment">#实例化进程对象</span></span><br><span class="line">        p.start()</span><br><span class="line">        process_list.append(p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> process_list:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结束测试&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-类实现多进程用法"><a href="#2-类实现多进程用法" class="headerlink" title="2. 类实现多进程用法"></a>2. 类实现多进程用法</h4><ul><li><p>继承类Process方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span>  Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyProcess</span>(<span class="title class_ inherited__">Process</span>): <span class="comment">#继承Process类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyProcess,self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试%s多进程&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    process_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment">#开启5个子进程执行fun1函数</span></span><br><span class="line">        p = MyProcess(<span class="string">&#x27;Python&#x27;</span>) <span class="comment">#实例化进程对象</span></span><br><span class="line">        p.start()</span><br><span class="line">        process_list.append(p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> process_list:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结束测试&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="多进程通信"><a href="#多进程通信" class="headerlink" title="多进程通信"></a>多进程通信</h3><blockquote><p>​进程是系统独立调度核分配系统资源（CPU、内存）的基本单位，进程之间是相互独立的，每启动一个新的进程相当于把数据进行了一次克隆，子进程里的数据修改无法影响到主进程中的数据，不同子进程之间的数据也不能共享，这是多进程在使用中与多线程最明显的区别。</p><p>​但是难道Python多进程中间难道就是孤立的吗？</p><p>​当然不是，python也提供了多种方法实现了多进程中间的通信和数据共享（可以修改一份数据）</p></blockquote><h4 id="1-进程队列Queue"><a href="#1-进程队列Queue" class="headerlink" title="1. 进程队列Queue"></a>1. 进程队列Queue</h4><ul><li><p>queue:进程之间的数据管道，实现进程通信。</p></li><li><p>有点类似派一个间谍过去，时不时的往回发送情报。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">q,i</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程%s 开始put数据&#x27;</span> %i)</span><br><span class="line">    q.put(<span class="string">&#x27;我是%s 通过Queue通信&#x27;</span> %i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line"></span><br><span class="line">    process_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        p = Process(target=fun1,args=(q,i,))  <span class="comment">#注意args里面要把q对象传给我们要执行的方法，这样子进程才能和主进程用Queue来通信</span></span><br><span class="line">        p.start()</span><br><span class="line">        process_list.append(p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> process_list:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主进程获取Queue数据&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(q.get())</span><br><span class="line">    <span class="built_in">print</span>(q.get())</span><br><span class="line">    <span class="built_in">print</span>(q.get())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结束测试&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-管道Pipe"><a href="#2-管道Pipe" class="headerlink" title="2. 管道Pipe"></a>2. 管道Pipe</h4><ul><li><p>管道Pipe和Queue的作用大致差不多，也是实现进程间的通信。</p></li><li><p>有点类似量子纠缠，先设置一对纠缠粒子，把其中一个发送给子进程，然后通过量子纠缠的方式进行瞬时通信。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">conn</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程发送消息：&#x27;</span>)</span><br><span class="line">    conn.send(<span class="string">&#x27;你好主进程&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程接受消息：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(conn.recv())</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    conn1, conn2 = Pipe() <span class="comment">#关键点，pipe实例化生成一个双向管</span></span><br><span class="line">    p = Process(target=fun1, args=(conn2,)) <span class="comment">#conn2传给子进程</span></span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主进程接受消息：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(conn1.recv())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主进程发送消息：&#x27;</span>)</span><br><span class="line">    conn1.send(<span class="string">&quot;你好子进程&quot;</span>)</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结束测试&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-数据共享方法Managers"><a href="#3-数据共享方法Managers" class="headerlink" title="3. 数据共享方法Managers"></a>3. 数据共享方法Managers</h4><ul><li><p>Queue和Pipe只是实现了数据交互，并没实现数据共享，即一个进程去更改另一个进程的数据。那么久要用到Managers。</p></li><li><p>类似定义了一个跨进程的公共变量，传入到子进程后，主进程、子进程都可以访问读写这个公共变量。</p><ul><li><pre><code class="python">from multiprocessing import Process, Managerdef fun1(dic,lis,index):    dic[index] = &#39;a&#39;    dic[&#39;2&#39;] = &#39;b&#39;        lis.append(index)    # [0,1,2,3,4,0,1,2,3,4,5,6,7,8,9]    #print(l)if __name__ == &#39;__main__&#39;:    with Manager() as manager:        dic = manager.dict()# 注意字典的声明方式，不能直接通过&#123;&#125;来定义        l = manager.list(range(5))# [0,1,2,3,4]        process_list = []        for i in range(10):            p = Process(target=fun1, args=(dic,l,i))            p.start()            process_list.append(p)        for res in process_list:            res.join()        print(dic)        print(l)</code></pre></li></ul></li></ul><h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="进程与线程区别"><a href="#进程与线程区别" class="headerlink" title="进程与线程区别"></a>进程与线程区别</h3><h3 id="进程和线程分别适用于什么情况"><a href="#进程和线程分别适用于什么情况" class="headerlink" title="进程和线程分别适用于什么情况"></a>进程和线程分别适用于什么情况</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;​		大家看过前面文章的应该都知道python中的GIL的存在，也就是多线程的时候，同一时间只能有一个线程在CPU上运行，而且是单个CPU上运行，不管你的CPU有多少核数。如果想要充分地使用多核CPU的资源，在python中大部分情况需要使用多进程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;多进程介绍&quot;&gt;&lt;a href=&quot;#多进程介绍&quot; class=&quot;headerlink&quot; title=&quot;多进程介绍&quot;&gt;&lt;/a&gt;多进程介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进程：一个程序运行起来后，代码+用到的资源 称为进程。他是操作系统分配资源的基本单元。线程完成的多任务，进程也可以。&lt;/li&gt;
&lt;li&gt;现在的电脑的CPU一般都有多个核心，在Python中可以使用 multiprocessing 包比较方便地实现将计算任务分配给多个核心，使之并行地计算以实现加速的效果。&lt;/li&gt;
&lt;li&gt;进程是表示资源分配的基本单位，又是调度运行的基本单位。例如，用户运行自己的程序，系统就创建一个进程，并为它分配资源，包括各种表格、&lt;a href=&quot;https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&amp;spm=1001.2101.3001.7020&quot;&gt;内存&lt;/a&gt;空间、磁盘空间、I&amp;#x2F;O设备等。所以，进程是系统中的并发执行的单位。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="教程" scheme="https://weicun581.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="python" scheme="https://weicun581.github.io/tags/python/"/>
    
  </entry>
  
</feed>
